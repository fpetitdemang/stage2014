/**
 */
package defaultname.provider;

import defaultname.util.DefaultnameAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DefaultnameItemProviderAdapterFactory extends DefaultnameAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DefaultnameItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.HTML} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HTMLItemProvider htmlItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.HTML}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHTMLAdapter() {
		if (htmlItemProvider == null) {
			htmlItemProvider = new HTMLItemProvider(this);
		}

		return htmlItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.HTMLElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HTMLElementItemProvider htmlElementItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.HTMLElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHTMLElementAdapter() {
		if (htmlElementItemProvider == null) {
			htmlElementItemProvider = new HTMLElementItemProvider(this);
		}

		return htmlElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.HEAD} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HEADItemProvider headItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.HEAD}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHEADAdapter() {
		if (headItemProvider == null) {
			headItemProvider = new HEADItemProvider(this);
		}

		return headItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.LINK} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LINKItemProvider linkItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.LINK}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLINKAdapter() {
		if (linkItemProvider == null) {
			linkItemProvider = new LINKItemProvider(this);
		}

		return linkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.TITLE} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TITLEItemProvider titleItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.TITLE}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTITLEAdapter() {
		if (titleItemProvider == null) {
			titleItemProvider = new TITLEItemProvider(this);
		}

		return titleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.BODY} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BODYItemProvider bodyItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.BODY}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBODYAdapter() {
		if (bodyItemProvider == null) {
			bodyItemProvider = new BODYItemProvider(this);
		}

		return bodyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.H1} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected H1ItemProvider h1ItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.H1}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createH1Adapter() {
		if (h1ItemProvider == null) {
			h1ItemProvider = new H1ItemProvider(this);
		}

		return h1ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.H2} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected H2ItemProvider h2ItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.H2}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createH2Adapter() {
		if (h2ItemProvider == null) {
			h2ItemProvider = new H2ItemProvider(this);
		}

		return h2ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.H3} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected H3ItemProvider h3ItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.H3}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createH3Adapter() {
		if (h3ItemProvider == null) {
			h3ItemProvider = new H3ItemProvider(this);
		}

		return h3ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.H4} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected H4ItemProvider h4ItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.H4}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createH4Adapter() {
		if (h4ItemProvider == null) {
			h4ItemProvider = new H4ItemProvider(this);
		}

		return h4ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.EM} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMItemProvider emItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.EM}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEMAdapter() {
		if (emItemProvider == null) {
			emItemProvider = new EMItemProvider(this);
		}

		return emItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.STRONG} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected STRONGItemProvider strongItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.STRONG}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSTRONGAdapter() {
		if (strongItemProvider == null) {
			strongItemProvider = new STRONGItemProvider(this);
		}

		return strongItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.B} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BItemProvider bItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.B}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBAdapter() {
		if (bItemProvider == null) {
			bItemProvider = new BItemProvider(this);
		}

		return bItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.I} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IItemProvider iItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.I}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIAdapter() {
		if (iItemProvider == null) {
			iItemProvider = new IItemProvider(this);
		}

		return iItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.TT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TTItemProvider ttItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.TT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTTAdapter() {
		if (ttItemProvider == null) {
			ttItemProvider = new TTItemProvider(this);
		}

		return ttItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.PRE} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PREItemProvider preItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.PRE}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPREAdapter() {
		if (preItemProvider == null) {
			preItemProvider = new PREItemProvider(this);
		}

		return preItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.BIG} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BIGItemProvider bigItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.BIG}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBIGAdapter() {
		if (bigItemProvider == null) {
			bigItemProvider = new BIGItemProvider(this);
		}

		return bigItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.SMALL} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SMALLItemProvider smallItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.SMALL}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSMALLAdapter() {
		if (smallItemProvider == null) {
			smallItemProvider = new SMALLItemProvider(this);
		}

		return smallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.SUB} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SUBItemProvider subItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.SUB}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSUBAdapter() {
		if (subItemProvider == null) {
			subItemProvider = new SUBItemProvider(this);
		}

		return subItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.SUP} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SUPItemProvider supItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.SUP}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSUPAdapter() {
		if (supItemProvider == null) {
			supItemProvider = new SUPItemProvider(this);
		}

		return supItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.STRIKE} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected STRIKEItemProvider strikeItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.STRIKE}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSTRIKEAdapter() {
		if (strikeItemProvider == null) {
			strikeItemProvider = new STRIKEItemProvider(this);
		}

		return strikeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.FONT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FONTItemProvider fontItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.FONT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFONTAdapter() {
		if (fontItemProvider == null) {
			fontItemProvider = new FONTItemProvider(this);
		}

		return fontItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.IMG} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IMGItemProvider imgItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.IMG}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIMGAdapter() {
		if (imgItemProvider == null) {
			imgItemProvider = new IMGItemProvider(this);
		}

		return imgItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.BR} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BRItemProvider brItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.BR}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBRAdapter() {
		if (brItemProvider == null) {
			brItemProvider = new BRItemProvider(this);
		}

		return brItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.MAP} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MAPItemProvider mapItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.MAP}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMAPAdapter() {
		if (mapItemProvider == null) {
			mapItemProvider = new MAPItemProvider(this);
		}

		return mapItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.AREA} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AREAItemProvider areaItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.AREA}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAREAAdapter() {
		if (areaItemProvider == null) {
			areaItemProvider = new AREAItemProvider(this);
		}

		return areaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.STYLE} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected STYLEItemProvider styleItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.STYLE}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSTYLEAdapter() {
		if (styleItemProvider == null) {
			styleItemProvider = new STYLEItemProvider(this);
		}

		return styleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.EMBED} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMBEDItemProvider embedItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.EMBED}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEMBEDAdapter() {
		if (embedItemProvider == null) {
			embedItemProvider = new EMBEDItemProvider(this);
		}

		return embedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.NOEMBED} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NOEMBEDItemProvider noembedItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.NOEMBED}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNOEMBEDAdapter() {
		if (noembedItemProvider == null) {
			noembedItemProvider = new NOEMBEDItemProvider(this);
		}

		return noembedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.SPAN} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SPANItemProvider spanItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.SPAN}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSPANAdapter() {
		if (spanItemProvider == null) {
			spanItemProvider = new SPANItemProvider(this);
		}

		return spanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.A} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AItemProvider aItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.A}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAAdapter() {
		if (aItemProvider == null) {
			aItemProvider = new AItemProvider(this);
		}

		return aItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.DIV} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DIVItemProvider divItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.DIV}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDIVAdapter() {
		if (divItemProvider == null) {
			divItemProvider = new DIVItemProvider(this);
		}

		return divItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.P} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PItemProvider pItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.P}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPAdapter() {
		if (pItemProvider == null) {
			pItemProvider = new PItemProvider(this);
		}

		return pItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.TABLE} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TABLEItemProvider tableItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.TABLE}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTABLEAdapter() {
		if (tableItemProvider == null) {
			tableItemProvider = new TABLEItemProvider(this);
		}

		return tableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.TR} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TRItemProvider trItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.TR}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTRAdapter() {
		if (trItemProvider == null) {
			trItemProvider = new TRItemProvider(this);
		}

		return trItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.TD} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TDItemProvider tdItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.TD}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTDAdapter() {
		if (tdItemProvider == null) {
			tdItemProvider = new TDItemProvider(this);
		}

		return tdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.TH} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected THItemProvider thItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.TH}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTHAdapter() {
		if (thItemProvider == null) {
			thItemProvider = new THItemProvider(this);
		}

		return thItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.FORM} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FORMItemProvider formItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.FORM}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFORMAdapter() {
		if (formItemProvider == null) {
			formItemProvider = new FORMItemProvider(this);
		}

		return formItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.INPUT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected INPUTItemProvider inputItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.INPUT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createINPUTAdapter() {
		if (inputItemProvider == null) {
			inputItemProvider = new INPUTItemProvider(this);
		}

		return inputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.TEXTAREA} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TEXTAREAItemProvider textareaItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.TEXTAREA}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTEXTAREAAdapter() {
		if (textareaItemProvider == null) {
			textareaItemProvider = new TEXTAREAItemProvider(this);
		}

		return textareaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.SELECT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SELECTItemProvider selectItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.SELECT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSELECTAdapter() {
		if (selectItemProvider == null) {
			selectItemProvider = new SELECTItemProvider(this);
		}

		return selectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.OPTION} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OPTIONItemProvider optionItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.OPTION}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOPTIONAdapter() {
		if (optionItemProvider == null) {
			optionItemProvider = new OPTIONItemProvider(this);
		}

		return optionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.OL} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OLItemProvider olItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.OL}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOLAdapter() {
		if (olItemProvider == null) {
			olItemProvider = new OLItemProvider(this);
		}

		return olItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.UL} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ULItemProvider ulItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.UL}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createULAdapter() {
		if (ulItemProvider == null) {
			ulItemProvider = new ULItemProvider(this);
		}

		return ulItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.LI} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LIItemProvider liItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.LI}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLIAdapter() {
		if (liItemProvider == null) {
			liItemProvider = new LIItemProvider(this);
		}

		return liItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.DL} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DLItemProvider dlItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.DL}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDLAdapter() {
		if (dlItemProvider == null) {
			dlItemProvider = new DLItemProvider(this);
		}

		return dlItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.DT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DTItemProvider dtItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.DT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDTAdapter() {
		if (dtItemProvider == null) {
			dtItemProvider = new DTItemProvider(this);
		}

		return dtItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.DD} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DDItemProvider ddItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.DD}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDDAdapter() {
		if (ddItemProvider == null) {
			ddItemProvider = new DDItemProvider(this);
		}

		return ddItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.APPLET} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected APPLETItemProvider appletItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.APPLET}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAPPLETAdapter() {
		if (appletItemProvider == null) {
			appletItemProvider = new APPLETItemProvider(this);
		}

		return appletItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.PARAM} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PARAMItemProvider paramItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.PARAM}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPARAMAdapter() {
		if (paramItemProvider == null) {
			paramItemProvider = new PARAMItemProvider(this);
		}

		return paramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.OBJECT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OBJECTItemProvider objectItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.OBJECT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOBJECTAdapter() {
		if (objectItemProvider == null) {
			objectItemProvider = new OBJECTItemProvider(this);
		}

		return objectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.FRAMESET} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FRAMESETItemProvider framesetItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.FRAMESET}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFRAMESETAdapter() {
		if (framesetItemProvider == null) {
			framesetItemProvider = new FRAMESETItemProvider(this);
		}

		return framesetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.FRAME} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FRAMEItemProvider frameItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.FRAME}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFRAMEAdapter() {
		if (frameItemProvider == null) {
			frameItemProvider = new FRAMEItemProvider(this);
		}

		return frameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.NOFRAME} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NOFRAMEItemProvider noframeItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.NOFRAME}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNOFRAMEAdapter() {
		if (noframeItemProvider == null) {
			noframeItemProvider = new NOFRAMEItemProvider(this);
		}

		return noframeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link defaultname.IFRAME} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IFRAMEItemProvider iframeItemProvider;

	/**
	 * This creates an adapter for a {@link defaultname.IFRAME}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIFRAMEAdapter() {
		if (iframeItemProvider == null) {
			iframeItemProvider = new IFRAMEItemProvider(this);
		}

		return iframeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (htmlItemProvider != null) htmlItemProvider.dispose();
		if (htmlElementItemProvider != null) htmlElementItemProvider.dispose();
		if (headItemProvider != null) headItemProvider.dispose();
		if (linkItemProvider != null) linkItemProvider.dispose();
		if (titleItemProvider != null) titleItemProvider.dispose();
		if (bodyItemProvider != null) bodyItemProvider.dispose();
		if (h1ItemProvider != null) h1ItemProvider.dispose();
		if (h2ItemProvider != null) h2ItemProvider.dispose();
		if (h3ItemProvider != null) h3ItemProvider.dispose();
		if (h4ItemProvider != null) h4ItemProvider.dispose();
		if (emItemProvider != null) emItemProvider.dispose();
		if (strongItemProvider != null) strongItemProvider.dispose();
		if (bItemProvider != null) bItemProvider.dispose();
		if (iItemProvider != null) iItemProvider.dispose();
		if (ttItemProvider != null) ttItemProvider.dispose();
		if (preItemProvider != null) preItemProvider.dispose();
		if (bigItemProvider != null) bigItemProvider.dispose();
		if (smallItemProvider != null) smallItemProvider.dispose();
		if (subItemProvider != null) subItemProvider.dispose();
		if (supItemProvider != null) supItemProvider.dispose();
		if (strikeItemProvider != null) strikeItemProvider.dispose();
		if (fontItemProvider != null) fontItemProvider.dispose();
		if (imgItemProvider != null) imgItemProvider.dispose();
		if (brItemProvider != null) brItemProvider.dispose();
		if (mapItemProvider != null) mapItemProvider.dispose();
		if (areaItemProvider != null) areaItemProvider.dispose();
		if (styleItemProvider != null) styleItemProvider.dispose();
		if (embedItemProvider != null) embedItemProvider.dispose();
		if (noembedItemProvider != null) noembedItemProvider.dispose();
		if (spanItemProvider != null) spanItemProvider.dispose();
		if (aItemProvider != null) aItemProvider.dispose();
		if (divItemProvider != null) divItemProvider.dispose();
		if (pItemProvider != null) pItemProvider.dispose();
		if (tableItemProvider != null) tableItemProvider.dispose();
		if (trItemProvider != null) trItemProvider.dispose();
		if (tdItemProvider != null) tdItemProvider.dispose();
		if (thItemProvider != null) thItemProvider.dispose();
		if (formItemProvider != null) formItemProvider.dispose();
		if (inputItemProvider != null) inputItemProvider.dispose();
		if (textareaItemProvider != null) textareaItemProvider.dispose();
		if (selectItemProvider != null) selectItemProvider.dispose();
		if (optionItemProvider != null) optionItemProvider.dispose();
		if (olItemProvider != null) olItemProvider.dispose();
		if (ulItemProvider != null) ulItemProvider.dispose();
		if (liItemProvider != null) liItemProvider.dispose();
		if (dlItemProvider != null) dlItemProvider.dispose();
		if (dtItemProvider != null) dtItemProvider.dispose();
		if (ddItemProvider != null) ddItemProvider.dispose();
		if (appletItemProvider != null) appletItemProvider.dispose();
		if (paramItemProvider != null) paramItemProvider.dispose();
		if (objectItemProvider != null) objectItemProvider.dispose();
		if (framesetItemProvider != null) framesetItemProvider.dispose();
		if (frameItemProvider != null) frameItemProvider.dispose();
		if (noframeItemProvider != null) noframeItemProvider.dispose();
		if (iframeItemProvider != null) iframeItemProvider.dispose();
	}

}
