#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{graphicx}
\usepackage{listings}
\end_preamble
\use_default_options true
\begin_modules
theorems-starred
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset Preview

\begin_layout Standard
\begin_inset Preview

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
pagenumbering{roman} 
\backslash
pagestyle{fancyplain} 
\backslash
thispagestyle{empty} 
\backslash
noindent 
\backslash
begin{center} 
\backslash
large{
\backslash
texttt{Académie de Montpellier}}
\backslash

\backslash
 
\backslash
Large{
\backslash
texttt{Université Montpellier II}}
\backslash

\backslash
 
\backslash
large{
\backslash
texttt{Sciences et Techniques du Languedoc}}
\backslash

\backslash
 
\backslash
end{center}
\end_layout

\begin_layout Plain Layout


\backslash
vspace{1cm}
\end_layout

\begin_layout Plain Layout


\backslash
begin{center} 
\backslash
Huge{
\backslash
textbf{Étude Bibliographique de Master 2
\backslash

\backslash
}}  
\backslash
vspace{1.0cm} %
\backslash
Huge{
\backslash
textbf{MASTER 2}} 
\backslash
normalsize 
\backslash
begin{center} 
\backslash
vspace{1.0cm} effectuée au Laboratoire d'Informatique de Robotique
\backslash

\backslash
 et de Micro-électronique de Montpellier 
\backslash
end{center}
\end_layout

\begin_layout Plain Layout


\backslash
vspace{2mm} %
\backslash
Large{
\backslash
textbf{franck PETITDEMANGE}}
\end_layout

\begin_layout Plain Layout


\backslash
vspace{0.1cm} 
\backslash
normalsize
\end_layout

\begin_layout Plain Layout


\backslash
vspace{3mm}
\end_layout

\begin_layout Plain Layout


\backslash
large{Spécialité} : 
\backslash
textbf{AIGLE}
\backslash

\backslash
 %
\backslash
Large{Formation Doctorale} : 
\backslash
textbf{Informatique}
\backslash

\backslash
 %
\backslash
large{{
\backslash
'E}cole Doctorale} : 
\backslash
textbf{Information, Structures, Systèmes} 
\backslash
vspace{1.0cm}
\end_layout

\begin_layout Plain Layout


\backslash
LARGE{
\backslash
textbf{Personnalisation de page web : application à l'amélioration de l'accessib
ilité du web}} 
\backslash
vspace{2mm}
\end_layout

\begin_layout Plain Layout


\backslash
begin{center}   par 
\backslash
textbf{Franck~PETITDEMANGE} 
\backslash
end{center}
\end_layout

\begin_layout Plain Layout


\backslash
vspace{2mm}
\end_layout

\begin_layout Plain Layout


\backslash
vspace{4cm}
\end_layout

\begin_layout Plain Layout


\backslash
textbf{Mars 2014}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
vspace{0.5cm}
\end_layout

\begin_layout Plain Layout

Sous la direction de 
\backslash
textbf{Marianne~HUCHARD, Michel~MEYNARD, Yoann~BONAVERO}
\end_layout

\begin_layout Plain Layout


\backslash
vspace{5mm}
\end_layout

\begin_layout Plain Layout

%
\backslash
begin{table}[hbt] %
\backslash
begin{center} %
\backslash
begin{tabular}{ l l l} %Messieurs & {
\backslash
em } & Rapporteurs
\backslash

\backslash
 %& {
\backslash
em } & 
\backslash

\backslash
 %& {
\backslash
em } & 
\backslash

\backslash
 %
\backslash

\backslash
 %Messieurs& {
\backslash
em } & Examinateurs 
\backslash

\backslash
 %& {
\backslash
em } & 
\backslash

\backslash
 %& {
\backslash
em } & 
\backslash

\backslash
 %
\backslash

\backslash
 %Monsieur & {
\backslash
em Evripidis BAMPIS} &  Directeur de thèse
\backslash

\backslash
 %& {
\backslash
em  X} & 
\backslash

\backslash
 %
\backslash
end{tabular} %
\backslash
end{center} %
\backslash
end{table}
\end_layout

\begin_layout Plain Layout

%
\backslash
vspace{.7cm}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
tableofcontents
\end_layout

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Section
Introduction et motivation
\end_layout

\begin_layout Standard
Le world wild web (www) est un reseau de ressource.
 La publication de ces ressources repose sur un langage universellement
 compréhensible et accepté par tous les ordinateurs : HTML, historiquement
 conçut pour faciliter l'échange d'article dans la communauté scientifique.
 La démocratisation du web à fait radicalement évoluer le contenu d'une
 page web, sans pour autant que le langage ne suivent ces évolutions.
 Ainsi les auteurs de page web ont détourné les pratiques de conception
 d'une page de manière anarchique.
 Ce manque d'homogénétité complique la compréhension du contenu publié sur
 le www par une machine.
 Faisant perdre la propriété universelle du web voulu par son créateur Tim
 Berners Lee : 
\end_layout

\begin_layout Quotation
\begin_inset Quotes eld
\end_inset

La puissance du Web réside dans son universalité.
 L'accès à tous, quel que soit son handicap est un aspect essentiel
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout Standard
Ceci introduit la motivation de ce stage et les problématiques qui en découlent.
 
\end_layout

\begin_layout Standard
Le sujet du stage est la personnalisation des pages web.
 L'objectif est de fournir des méthodes et des outils afin d'adapter une
 page suivant les souhaits d'un lecteur.
 On s'interesse à une application pour l'amélioration de l'accessibilité
 des pages web pour les personnes en situation de handicap visuel.
 
\end_layout

\begin_layout Standard
L'adaptation d'une page web implique notre première problématique : la restructu
ration d'une page web.
 On souhaite expérimenter une approche basée sur les méta-modèles.
 L'idée étant d'extraire la structure d'une page et d'en construire une
 représentation plus abstraite.
 Cela doit nous permettre de s'affranchir de la diversité de conception
 de ces dernières.
 A partir de cette représentation on veut lui appliquer des transformations,
 puis générer une nouvelle page conforme aux transformations.
 
\end_layout

\begin_layout Standard
La conception des pages web s'articule autour : d'un langage pour décrire
 la structure du document (HTML) et d'un langage pour décrire la mise en
 forme du document (CSS).
 Les pages sont constituées d’éléments hétérogènes : une page est constituée
 d'un ou plusieurs contenu principal, d'un menu de navigation, de publicité,
 etc...
 Chacun de ces éléments représentent une sous-structure de la page.
 Lorsqu'on regarde une page web depuis un navigateur, on constate que ces
 éléments sont structurés de façon sémantique, ils sont organisés selon
 leur sens.
 La difficulté dans la tâche de d'extraction de la structure d'une page
 est dû au manque d'expressivité de HTML.
 En effet, la norme actuelle de HTML (HTML 4), ne fournit pas de moyen de
 délimiter les éléments du document en fonction de leur sémantique.
 Par exemple, on ne peut pas délimiter de manière explicite la structure
 d'un menu dans une page avec ce langage.
 Le constat est que l'information de la structure d'une page apparaît principale
ment dans la mise en page.
 La structure d'une page est explicitée à travers l'utilisation de police,
 de couleur ou plus généralement d’élément visuel pour caractériser les
 contenus qui ont la même signification.
\end_layout

\begin_layout Standard
La seconde problématique est la définition d'un protocole d'acquisition
 et d'apprentissage automatique des souhaits de personnalisation d'une page
 par le lecteur.
 On veut fournir au lecteur une interface permettant la modification d'une
 page.
 
\emph on
Un modèle peut être vu comme un langage de haut niveau pour décrire une
 page.
 L'idée étant d'exploité le modèle de page transformé par l'utilisateur
 pour en inférer des voeux de modification.
 L' atout dans l'utilisation de modèle permet une capitalisation des connaissanc
es, indépendament du support technologique, du profil d'un utilisateur.
 
\end_layout

\begin_layout Section
Transformation de modèle
\end_layout

\begin_layout Definition
\begin_inset Quotes eld
\end_inset

Un modele est une description d'une partie d'un systeme écrit dans un langage
 formel
\begin_inset Quotes erd
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Kleppe_et_al"

\end_inset


\end_layout

\begin_layout Definition
C'est une représentation simplifiée d'une partie d'un système, une abstraction
 du système étudié suivant un point de vue.
 Par exemple une carte routière est une abstraction d'un réseau routier,
 il existe plusieurs types de carte suivant ce que l'on veut étudier (chemin
 pédestre, chemin routier etc).
\end_layout

\begin_layout Quotation
\begin_inset Quotes eld
\end_inset

Pour un observateur A, M est un modèle de l'objet O, si M aide A à répondre
 aux questions qu'il pose sur O
\begin_inset Quotes erd
\end_inset

 (Minsky) 
\end_layout

\begin_layout Standard
La notion de modèle fait référence à un langage formel definissant les élements
 conceptuels du modèle : le méta-modèle.
 La syntaxe et la sémantique du modèle sont conforme à un méta modèle.
\end_layout

\begin_layout Definition
\begin_inset Quotes eld
\end_inset

Un méta-modèle est un modèle qui définit un langage formel pour exprimer
 un modèle
\begin_inset Quotes erd
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Kleppe_et_al"

\end_inset


\end_layout

\begin_layout Standard
Littéralement, c'est un modèle de modèle.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Dans le cadre du sujet nous nous plaçons dans un contexte de restructuration
 d'une page.
 On souhaite constuire un modèle d'une page web à partir de cette dernière.
 L'avantage est d'en manipuler une représentation independante de la diversité
 de conception des pages.
 En effet les élements, ou concepts, récurrents peuvent être structurés
 ou mise en forme de manière différente d'une page web à l'autre.
 
\begin_inset CommandInset citation
LatexCommand cite
key "tichelaar2000famix"

\end_inset

 présente une méthodologie similaire.
 Les auteurs souhaitent appliquer des traitements homologues sur des systemes
 orientés objets implémenter dans différentes plateforme (C++, Java, ADA,
 etc).
 Pour cela ils ont réalisés un meta-modèle de systeme objet dans le but
 d'effectuer des traitements independamment d'une representation sous-jacente.
 
\end_layout

\begin_layout Standard
Nous voulons exploiter ce modèle de deux façon différentes.
 D'une part ce modèle doit nous servir de support pour appliquer un processus
 de transformation sur une page.
 Et d'autre part le modèle doit nous servir de support à l'extraction de
 règles de transformation
\emph on
, 
\emph default
que nous de ne traiterons pas dans la bibliographie mais par la suite dans
 le stage.
\end_layout

\begin_layout Definition
\begin_inset Quotes eld
\end_inset

Une transformation est la génération automatique d'un modèle cible depuis
 un modèle source selon une transformation définie
\begin_inset Quotes erd
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Kleppe_et_al"

\end_inset

 
\end_layout

\begin_layout Definition
C' est un ensemble de règles qui décrivent comment un modèle du langage
 source peut être transformé dans un modèle du langage cible.
 Elles sont la description de comment une ou plusieurs constructions d'un
 langage source peut être transformé dans un langage cible.
 Plusieurs approches pour la transformation de modèle existent 
\begin_inset CommandInset citation
LatexCommand cite
key "czarnecki2003classification"

\end_inset

.
 
\end_layout

\begin_layout Definition
Suivant le langage du modèle source et du modèle cible, intervient un distinctio
n (fig.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ref{transfo_verticale_vs_horizontale}
\end_layout

\end_inset

).
 On parle de transformation endogène (rééchelonnement) lorsque les modèles
 sont exprimés dans le même langage.
 On parle de transformation exogène (translation)dans le cas contraire.
\end_layout

\begin_layout Definition
Il s'agit de transformation horizontale quand le modèle source et cible
 possèdent le même niveau d'abstraction.
 Lorsque ce n'est pas le cas, il s'agit de transformation verticale (fig.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ref{transfo_endogene_vs_exogene}
\end_layout

\end_inset

).
\end_layout

\begin_layout Definition
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=300px]{img/transfo_verticale_vs_horizontale.jpg}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Transformation horizontale et verticale 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
label{transfo_verticale_vs_horizontale}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Definition
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=300px]{img/endogene_vs_exogene.jpg}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Transformation endogène et exogène 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
label{transfo_endogene_vs_exogene}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Definition
Il semble que notre processus de restructuration s'incrive dans le cas d'une
 transformation endogène et horizontale (voir figure 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ref{transfo_endogene}
\end_layout

\end_inset

).
 En effet, le modèle cible doit être conforme au méta-modèle et les deux
 modèles (cibles et sources) ont le même niveau d'abstraction.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=300px]{img/transformation_endogene.jpg}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Transformation endogène et horizontale 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
label{transfo_endogene}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Modele de page web
\end_layout

\begin_layout Subsection
Introduction
\end_layout

\begin_layout Standard
Ainsi les concepts décrit par le méta-modèle doivent comprendre les éléments,
 ou concept, d'une page que l'on souhaite transformer.
 Par exemple, si l'on souhaite modifier la couleur du texte de la bar de
 navigation, on doit pouvoir exprimer dans le modèle de page le concept
 de bar de navigation et concept de couleur.
\end_layout

\begin_layout Standard
On s'interesse à metamodèle proche de la vision qu'un lecteur peut avoir
 d'une page pour en exprimer des transformations representatif de ses souhaits.
 Pour cela on propose d'étudier et de comparer le langage standart de publicatio
n de document sur le web, HTML, dans la norme 4 et 5 mais aussi une toxonomie
 pour la description d'interface graphique ARIA.
\end_layout

\begin_layout Subsection
HTML 4
\end_layout

\begin_layout Standard
HTML 4 
\begin_inset CommandInset citation
LatexCommand cite
key "HTML_4"

\end_inset

 est un langage permettant la publication de contenu sur le web.
 C'est le langage standard actuelle des pages web.
 Il permet de structurer le contenu et d'associer une mise en forme aux
 contenu.
 Le contenu est organisé de manière hierarchique en le découpant en section
 et sous-section.
 
\end_layout

\begin_layout Paragraph
Structuration générique
\end_layout

\begin_layout Standard
HTML 4 propose un mécanisme générique pour la composition du contenu formant
 la structure des pages web.
 Ce mécanisme gravite autour des éléments de type <DIV> leurs identifiants
 respective : id et classe.
\end_layout

\begin_layout Subparagraph
DIV
\end_layout

\begin_layout Standard
Signifiant division, est utilisé comme conteneur générique permettant d'organise
r le contenu.
 Il est utilisé pour :
\end_layout

\begin_layout Itemize
regrouper les elements pour leur appliquer un style (une mise en forme particuli
ere).
\end_layout

\begin_layout Itemize
signaler un section ou ou sous-section.
 
\end_layout

\begin_layout Subparagraph
id et class
\end_layout

\begin_layout Standard
Chaque élément peut se voir attribuer un identifiant ou une classe d'appartenanc
e.
 
\emph on
id
\emph default
 assigne un nom à un élément.
 Ce nom est unique dans le document.
 
\emph on
class
\emph default
 au contraire, assigne un ou plusieurs noms de classe à un élément; on peut
 dire de l'élément qu'il appartient à ces classes.
 Un nom de classe peut être partagé par plusieurs instances d'éléments.
 Les identifiants et les classes sont des suites de caractères quelconque
 décidé arbitrairement par l'auteur du document.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Les éléments DIV utilisés conjointement avec les attributs id et classe
 sont au cœur du mécanisme générique de structuration d'un document.
 DIV permet de divisé le contenu d'un document en section et sous-section
 pour décrire sa structure.
 Les elements DIV ayant une sémantique neutre, c'est l'auteur du contenu
 qui attribut (de manière arbitraire) un nom de 
\emph on
class
\emph default
 ou un 
\emph on
id
\emph default
.
 Le but étant de définir une rôle au contenu ou une mise en forme.
 On note le caractère implicite de la structuration.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[frame=single, language=html, caption={Exemple de structuration
 avec HTML 4}]
\end_layout

\begin_layout Plain Layout

<body>
\end_layout

\begin_layout Plain Layout

	<div id="header" ></div>
\end_layout

\begin_layout Plain Layout

	<div id="navigation_bar"/>
\end_layout

\begin_layout Plain Layout

	<div id="main_content">
\end_layout

\begin_layout Plain Layout

		<div class="article"></div>
\end_layout

\begin_layout Plain Layout

		<div class="article"></div>
\end_layout

\begin_layout Plain Layout

	</div>
\end_layout

\begin_layout Plain Layout

	<div id="footer"></div>
\end_layout

\begin_layout Plain Layout

</body>
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Exemple d'attribution de rôle
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[frame=single, language=html, caption={Exemple de structuration
 avec HTML 4}]
\end_layout

\begin_layout Plain Layout

<body>
\end_layout

\begin_layout Plain Layout

<div class="section" id="elephants-foret" > 
\end_layout

\begin_layout Plain Layout

	<h1>Les éléphants des forêts</h1> 
\end_layout

\begin_layout Plain Layout

	<p>Dans cette partie, nous abordons le sujet 
\end_layout

\begin_layout Plain Layout

moins connu des éléphants des forêts.</p>
\end_layout

\begin_layout Plain Layout

	<div class="sous-section" id="habitat-foret" > 
\end_layout

\begin_layout Plain Layout

	<h2>L'habitat</h2> 
\end_layout

\begin_layout Plain Layout

	<p>Les éléphants des forêts ne vivent pas 
\end_layout

\begin_layout Plain Layout

dans les arbres mais au milieu d'eux.</p>
\end_layout

\begin_layout Plain Layout

	</div> 
\end_layout

\begin_layout Plain Layout

</div>
\end_layout

\begin_layout Plain Layout

</body>
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Exemple découpage en section et sous-section
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Architecture page web HTML 4
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=300px]{img/architecture_Geekos_HTML4-294x300.jpg}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
HTML 5
\end_layout

\begin_layout Standard
HTML 5 
\begin_inset CommandInset citation
LatexCommand cite
key "HTML_5"

\end_inset

 étend HTML 4.
 La norme HTML 4 est toujours rétroactive.
 HTML 5 remplace la structure générique de HTML 4 par un nouveau modèle.
 Ce modèle amène de nouveaux élements qui apportent une sémantique standard
 et explicite à la structure d'une page.
 
\end_layout

\begin_layout Paragraph

\end_layout

\begin_layout Paragraph
Structuration 
\end_layout

\begin_layout Standard
Les nouveaux élements de HTML 5 spécifie donc une sémantique standard :
\end_layout

\begin_layout Itemize
Section : represente une section générique dans un document, c'est à dire
 un regroupement de contenu par thématique.
\end_layout

\begin_layout Itemize
Article : représente un contenu autonome dans une page, facile l'inclusion
 de plusieurs sous document
\end_layout

\begin_layout Itemize
nav : représente une section de liens vers d'autre page ou des fragments
 de cette page
\end_layout

\begin_layout Itemize
aside : représente une section de la page dont le contenu est indirectement
 lié à ce qui l'entoure et qui pourrait être séparé de cet environnement
\end_layout

\begin_layout Itemize
header : représente un groupe d'introduction ou une aide à la navigation.
 Il peut contenir des éléments de titre, mais aussi d'autres éléments tels
 qu'un logo, un formulaire de recherche, etc.
\end_layout

\begin_layout Itemize
footer : représente le pied de page, ou de la section, ou de la racine de
 sectionnement la plus proche
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Architecture HTML 5
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=300px]{img/architecture_Geekos_HTML5-293x300.jpg}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
ARIA
\end_layout

\begin_layout Standard
ARIA (Acessible Rich Internet Application) 
\begin_inset CommandInset citation
LatexCommand cite
key "ARIA"

\end_inset

 est la spécification d'une ontologie décrivant une interface graphique.
 Elle fournit des informations sur la structuration d'un document et décrit
 les élements qui composent l'interface au moyen d'un ensemble de rôles,
 d'états et de propriétés .
\end_layout

\begin_layout Paragraph
Rôle 
\end_layout

\begin_layout Standard
Les rôles permettent d'identifier la fonction de chaque elements d'une interface.
 Ils sont regroupé en trois catégories :
\end_layout

\begin_layout Itemize
Widget Roles : référence d'un ensemble de widget préfinis (alertdialog,
 button, slider, scrollbar, menu, etc)
\end_layout

\begin_layout Itemize
Document Structure Roles : décrit les structures qui organisent un document
 (article, definition, entête, ect)
\end_layout

\begin_layout Itemize
Landmark Roles : décrit les régions principales d'une interface graphique
 (main, navigation, search, etc)
\end_layout

\begin_layout Paragraph
Etats et propriétés
\end_layout

\begin_layout Standard
ARIA permet d'associer des états et propriétés à des wigets.
 
\end_layout

\begin_layout Standard
Un état est une configuration unique d'un objet.
 Par exemple, on peut définir l'état d'un bouton par l'état 
\emph on
aria-checked 
\emph default
qui peut prendre trois propriétés suivant l'interaction avec l'utilisateur
 : 
\emph on
true - false - mixed
\emph default
 .
 Aria prévoit même un systeme d'annotation pour les objets ayant des comportemen
ts asynchrones.
 Par exmple, on peut annoter qu'un element se met à jour de manière autonome.
\end_layout

\begin_layout Standard
On peut associé un ensemble de propriété par exemple la valeur minimal ou
 maximal que l'on doit remplir dans un champs de saisit 
\emph on
aria-valuemin, aria-valuemax.
\end_layout

\begin_layout Subsection
Discussion
\end_layout

\begin_layout Paragraph
HTML 4
\end_layout

\begin_layout Standard
fourni un mécanisme de structuration générique pour la publication de document
 sur le web.
 Ce support semble ne pas être assez riche à la description d'une page web.
 En effet, ce dernier pose plusieurs problèmes :
\end_layout

\begin_layout Itemize
Une page possède un contenu hétérogène.
 Plusieurs document peuvent être décrit dans le page.
 Il n'y pas de moyen de délimiter le contour d'un document de manière explicite
 dans une page.
\end_layout

\begin_layout Itemize
Une page possède un contenu possiblement non linéaire.
 Impossible de l'exprimer.
\end_layout

\begin_layout Itemize
Un page web contient des élements qui ne sont pas en rapport avec le contenu
 d'un document, mais plûtot avec le site web.
 Typiquement un menu de navigation, un logo etc...
 Il n'est pas possible de le modéliser explicitement.
 
\end_layout

\begin_layout Standard

\emph on
 
\end_layout

\begin_layout Paragraph
HTML 5
\end_layout

\begin_layout Standard
apporte des améliorations par rapport aux points précédents : 
\end_layout

\begin_layout Itemize
Les élements section permettent de délimiter et d'exprimer explicitement
 les sections d'une page, et leur offre un environnement contextuel.
 
\end_layout

\begin_layout Itemize
On peut modéliser qu'un contenu n'est pas linéaire
\end_layout

\begin_layout Itemize
On peut modéliser certain élement propre au site web tel qu'un menu, un
 logo etc.
\end_layout

\begin_layout Paragraph

\emph on
ARIA 
\end_layout

\begin_layout Standard
semble posséder de bonnes caractèristiques pour être le support d'un méta-modèle.
 HTML est un langage de publication de document, il décrit la structuration
 hiérarchique d'un document.
 Il présente des vacuités pour décrire tout le contenu que peut représenter
 une page web.
 Notamment avec le developpement des élements graphiques appelés widget.
 Ceux-ci possède un comportement dynamique et possède protocole de communication
 asynchrone, non décrit par HTML.
 ARIA est capable : 
\end_layout

\begin_layout Itemize
de modéliser la description d'un document avec une sémantique standarts
 et riche (inclus les élements de sémantique de HTML 5), 
\end_layout

\begin_layout Itemize
de modéliser la structure d'une page avec une sémantique standarts et riche,
 
\end_layout

\begin_layout Itemize
de modéliser la structure et le comportement des widget avec une sémantique
 standarts et riche.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Section
Extraction structure 
\end_layout

\begin_layout Subsection
Introduction
\end_layout

\begin_layout Standard
L'extraction est la première phase du processus de restructuration.
 On peut la décrire comme le processus de décourverte des éléments d'un
 tout.
 Ici on veut récuperer les élements consitutifs d'une page web.
 Les éléments à extraire de la page correspondent aux différentes brique
 conforme aux élements d'un méta-modele définit à priori.
 La problématique est dû au langage de conception des pages web qui manque
 de sémantique, rendant un processus d'extraction automatique difficile.
\end_layout

\begin_layout Subsection
Approche segmentation visuelle
\end_layout

\begin_layout Standard
L'approche proposé par les auteurs 
\begin_inset CommandInset citation
LatexCommand cite
key "cai2003extracting"

\end_inset

 présente un algorithme de partitionnement basé sur les élements de mise
 en forme des pages web.
 Le partionnement extrait une structure qui regroupe les elements d'une
 page semantiquement proche en bloc.
 Le postulat est que les éléments d'une page possédant des caractéristiques
 de mise en forme proche, tels que la police, la couleur, la taille, sont
 sémantiquement proche.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=300px]{img/VIPS-partionnement.jpg}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Exemple de partionnement, (a) page (b) DOM de la page
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
L'algorithme exploite le DOM
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Document Object Model
\end_layout

\end_inset

 de la page web.
 Le DOM est une API pour les documents HTML (ou plus généralement XML) .
 Il fournit une représentation arborescente d'un document et les moyens
 d'acceder à son contenu et sa mise en forme.
 
\end_layout

\begin_layout Standard
Le processus de segmentation, figure 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ref{vips-process}
\end_layout

\end_inset

, se décompose en trois phases : un processus d'extraction de blocs, un
 processus de detection de séparateur et un processus de reconstruction.
 
\end_layout

\begin_layout Standard
Le processus d'extaction détecte les éléments du niveau courant du DOM succeptib
le de former un contenu cohérent.
 Cette détection repose sur des séparateurs explicites : on sais que certains
 elements délimitent le contour d'un contenu (par exemple les balises <DIV>).
 Mais également sur une fonction de distance visuelle comparant les noeuds
 parents et frères du noeud courant : une balise <DIV> à de plus de grande
 chance de délimiter un contenu sémantiquement différent du noeud parent
 si la couleur de fond est différente de celle du noeud parent.
 Pour chaque noeud l'algorithme vérifie si il forme un bloc ou non.
 Si oui il associe un degre de cohérence au bloc.
 Ce dégre de cohérence est un indicateur de l'importance sémantique du bloc.
 Si non, il est appliqué le même processus aux enfants du noeud.
 Quand tous les noeuds du bloc courant sont extraits, ils sont mis dans
 un pool.
 
\end_layout

\begin_layout Standard
Des séparateurs entre les blocs sont ensuite detectés.
 L'algorithme dététecte ici des séparateurs implicites, n'apparaîsant pas
 dans la structure HTML.
 Les séparateurs implicite sont les espaces entre les blocs d'une pool.
 Un poid est attribué à chaque séparateur suivant sont importance (par exemple,
 plus l'espacement entre deux blocs est grand, plus le poid sera elevé).
 Ce poid est un indicateur différence sémantique entre blocs adjacent.
 Plus le poid du séparateur est élevé en deux blocs, plus leur contenu sera
 sémantiquement éloigné.
\end_layout

\begin_layout Standard
Une construction hierachique des blocs est crée.
 Cette construction hierachique repose sur le degre de coherence attribué
 à chaque bloc.
 
\end_layout

\begin_layout Standard
Pour chaque nouveau bloc de la structure hierarchique construite, l'algorithme
 teste le degre de cohérence attribué par rapport à un seuil de cohérence
 définit.
 Ce seuil est définit suivant la granularité de la structure que l'on veut
 en sortie de l'algorithme.
 Si le degres de cohérence est pas supérieur au seuil de cohérence, le bloc
 est de nouveau partionné.
 La structure finale est construite après que tous les blocs soit traités.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=300px]{img/VIPS-processus.jpg}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Algorithme de segmentation 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
label{vips-process}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Compréhension de contenu
\end_layout

\begin_layout Subsection
Arbre de décision
\end_layout

\begin_layout Standard
\begin_inset CommandInset citation
LatexCommand cite
key "chen2001function"

\end_inset


\end_layout

\begin_layout Subsection
Similarité de séquence
\end_layout

\begin_layout Standard
L'un des postulats de base en bioinformatique est qu'une séquence génomique
 similaire donne une protéine présentant la même fonction.
 En d'autre terme, des séquences ayant des similitudes (syntaxiques) est
 un signe de proximité fonctionnelle.
 Appliqué à une page web, cela signifie que par exemple la structure (syntaxique
) d'un menu d'une page web A est similaire à la structure syntaxique d'une
 page web B.
 Il semble cohérent d'appliquer ce postulat à une page web.
 En effet la publication de contenu sur le web se standardise par l'intermédiare
 des scripts générant des pages de manière automatique et standardisé (Wordpress
, joomla, etc).
 Afin d'obtenir un bon référencement, les moteurs de recherche insite les
 auteurs de pages web d'adoper une conception standard dans la conception
 des pages web.
 En construisant une séquence représentative d'un élement de notre méta-modèle,
 il devrait être possible de determiner la fonction d'une sequence d'une
 page web.
 Les bioinformaticiens utilisent le concept d'alignement pour déterminer
 la similarité de deux séquences, en d'autre terme pour savoir il elle possède
 la même fonction.
\end_layout

\begin_layout Definition
L' alignement est la mise en correspondance de deux séquences.
 Soit deux sequences X1:n et Y1:m à valeur dans le même alphabet fini 
\begin_inset Formula $\Lambda$
\end_inset

.
 Un alignement c'est une correspondance entre les lettres de la premiere
 séquence et celles de la deuxieme, sans en changer l'ordre, et en autorisant
 eventuellement des « trous ».
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
G A A T C _ T G A C
\end_layout

\begin_layout Plain Layout
C A _ _ C G T _ A _
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Alignement possible des sequences 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
X1=GAATCTGAC,Y1=CACGTA
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\backslash

\backslash

\end_layout

\end_inset

La mise en correspondance repose sur trois types d'opérations élementaires
 : la substitution, l'insertion, deletion.
 Plusieurs combinaisons d'alignements existent.
 Lorsque l'on souhaite comparer la similitude de deux sequences, la meilleur
 solution est celle qui minimise le nombre d' opérations d'insertions et
 de deletions.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=300px]{img/operation_alignement_sequence.jpg}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
opérations d'alignements
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Il existe deux types d'alignements : local et global.
 
\end_layout

\begin_layout Subsubsection
L'alignement global 
\end_layout

\begin_layout Standard
L'alignement global est conçu pour comparer des séquences sur toute leur
 longueur.
 Un méthode optimale pour trouver un alignement global maximal de chaîne
 de caractères est l'algorithme de Needleman-Wunsch 
\begin_inset CommandInset citation
LatexCommand cite
key "needleman1970general"

\end_inset

.
 La méthode de segmentation visuelle (section précedente) semble pouvoir
 extraire et regrouper les éléments sémantiquements proche d'une page.
 L'inconvénient est que l'on ne connait pas la signification de ses élements.
 Une approche serait de construire une séquence reprensentative d'un élement
 de notre méta-modèle et de comparer les sequences extraites d'une page
 aux sequences associée au méta-modèle.
 
\end_layout

\begin_layout Subsubsection
L'alignement local 
\end_layout

\begin_layout Standard
L'alignement local est conçu pour rechercher dans la séquence A des régions
 semblables à la séquence B (ou à des parties de la séquence B).
 Une méthode pour trouver un alignement local maximal de chaîne de caractères
 est l'algorithme de Smith & Waterman 
\begin_inset CommandInset citation
LatexCommand cite
key "smith1981identification"

\end_inset

.
 Cette approche ne necessite pas d'extraire de sequences dans le une page.
 On peut comparer directement une sequence du meta-modele à la page pour
 trouver la zone qui correspond.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=200px]{img/Global-local-alignment.png}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Comparaison sequence d'alignement globale et locale
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
label{comp-align}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Comme on le voit dans la figure 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ref{comp-align}
\end_layout

\end_inset

 l'alignement global tente d'aligner les séquences sur toute leur longueur,
 tandis que l'alignement local se focalise sur les zones de forte homologie.
\end_layout

\begin_layout Subsection
Similarité d'arbre
\end_layout

\begin_layout Standard
Une approche autre approche dans l'etude de similarité de structure est
 la comparaison d'arbre.
 Cette approche consiste à trouver la plus petite ou la moins coûteuse séquence
 d'opération d'édition (substitution, suppression et insertion) qui permet
 la transformation d'un arbre vers un autre.
 
\end_layout

\begin_layout Standard
Notons 
\begin_inset Formula $\Lambda$
\end_inset

 un noeud vide.
 Une opération d'édition est ecrit 
\begin_inset Formula $b\rightarrow c$
\end_inset

 , ou b et c sont soit un noeud, soit 
\begin_inset Formula $\Lambda$
\end_inset

 .
 
\end_layout

\begin_layout Itemize
\begin_inset Formula $b\rightarrow c$
\end_inset

 est une opération de substition si 
\begin_inset Formula $b\neq\Lambda$
\end_inset

 et 
\begin_inset Formula $c\neq\Lambda$
\end_inset

, 
\end_layout

\begin_layout Itemize
une opération de suppression si 
\begin_inset Formula $b\neq\Lambda\doteq c$
\end_inset

, 
\end_layout

\begin_layout Itemize
et une opération d'insertion si 
\begin_inset Formula $b=\Lambda\neq c$
\end_inset


\end_layout

\begin_layout Standard
Pour exprimer une séquence d'opération élémentaire qui transforme l'arbre,
 on utilise le concept de mapping, introduit 
\begin_inset CommandInset citation
LatexCommand cite
key "tai1979tree"

\end_inset

.
 Un mapping établie une correspondance un-à-un entre les nœuds de deux arbres
 ordonnés et qui préservent l'ordre des nœuds.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Definition*
Un Mapping 
\begin_inset Formula $M$
\end_inset

 de l'arbre T1 vers l'arbre T2 est un ensemble de paire ordonnée d'entier
 (i, j), 
\begin_inset Formula $1\leqslant i\leqslant n1$
\end_inset

, 
\begin_inset Formula $1\leq j\leq n2$
\end_inset

, satisfaisant les conditions suivantes, pour tous 
\begin_inset Formula $(i1,j1),(i2,j2)\in M$
\end_inset

:
\end_layout

\begin_layout Itemize
i1=i2 si et seulement si, j1=j2 (one-to-one condition);
\end_layout

\begin_layout Itemize
t1[i1] est à droite de t1[i2], si est seulement si, t2[j1] est à gauche
 de t2[j2] (preservation de l'ordre des noeuds frères);
\end_layout

\begin_layout Itemize
t1[i1] est un ancêtre de t1[i2] si et seulement si, t2[j1] est un ancêtre
 de t2[j2] (preservation de l'ordre des ancêtres);
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Definition*
Soit M un mapping entre les arbres T1 et T2 décrivant des opérations de
 modification.
 S est l'ensemble de pair 
\begin_inset Formula $(i,j)\in M$
\end_inset

, D l'ensemble des nœuds T1[i] n'ayant pas de paire 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $(i,j)\in M$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
 , et I l'ensemble des nœuds T2[j] n'ayant pas de paire 
\begin_inset Formula $(i,j)\in M$
\end_inset

.
 Le coût du mapping est donné par 
\begin_inset Formula $|S|p+|I|q+|D|r$
\end_inset

| , ou p est le coût des substitution non identique, q est le coût des insertion
s (1), r est le coût d'une suppression (1), le coût des substitution identique
 est 0.
 
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Pour connaître la similarité entre deux structures, on veut calculer une
 distance d'alignement.
 C'est à dire trouver le coût minimum du mapping pour que T1 et T2 soit
 isomorphe.
 KUO-CHUNG TAI 
\begin_inset CommandInset citation
LatexCommand cite
key "tai1979tree"

\end_inset

 propose un algorithme de programmation dynamique pour résoudre la question
 de distance d'arbre en temps séquentiel 
\begin_inset Formula $O(|T1|\times|T2|\times min(depth(T1),leaves(T1))\times min(depth(T2),leaves(T2)))$
\end_inset

 .
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Etant donnée une sous structure 
\end_layout

\begin_layout Subsection
Discution
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Section
Construction de motif
\end_layout

\begin_layout Standard

\emph on
Certain elements de la section precendante repose sur la construction d'un
 pattern.
 Plusieurs approche : PAT-TREE, consensus de graphe, Modèle de Markov caché
\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "bibliographie/biblio"
options "plain"

\end_inset


\end_layout

\end_body
\end_document
