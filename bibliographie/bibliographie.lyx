#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{graphicx}
\usepackage{listings}
\usepackage{framed}
\end_preamble
\use_default_options true
\begin_modules
theorems-starred
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize custom
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset Preview

\begin_layout Standard
\begin_inset Preview

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
pagenumbering{roman} 
\backslash
pagestyle{fancyplain} 
\backslash
thispagestyle{empty} 
\backslash
noindent 
\backslash
begin{center} 
\backslash
large{
\backslash
texttt{Académie de Montpellier}}
\backslash

\backslash
 
\backslash
Large{
\backslash
texttt{Université Montpellier II}}
\backslash

\backslash
 
\backslash
large{
\backslash
texttt{Sciences et Techniques du Languedoc}}
\backslash

\backslash
 
\backslash
end{center}
\end_layout

\begin_layout Plain Layout


\backslash
vspace{1cm}
\end_layout

\begin_layout Plain Layout


\backslash
begin{center} 
\backslash
Huge{
\backslash
textbf{Étude Bibliographique de Master 2
\backslash

\backslash
}}  
\backslash
vspace{1.0cm} %
\backslash
Huge{
\backslash
textbf{MASTER 2}} 
\backslash
normalsize 
\backslash
begin{center} 
\backslash
vspace{1.0cm} effectuée au Laboratoire d'Informatique de Robotique
\backslash

\backslash
 et de Micro-électronique de Montpellier 
\backslash
end{center}
\end_layout

\begin_layout Plain Layout


\backslash
vspace{2mm} %
\backslash
Large{
\backslash
textbf{franck PETITDEMANGE}}
\end_layout

\begin_layout Plain Layout


\backslash
vspace{0.1cm} 
\backslash
normalsize
\end_layout

\begin_layout Plain Layout


\backslash
vspace{3mm}
\end_layout

\begin_layout Plain Layout


\backslash
large{Spécialité} : 
\backslash
textbf{AIGLE}
\backslash

\backslash
 %
\backslash
Large{Formation Doctorale} : 
\backslash
textbf{Informatique}
\backslash

\backslash
 %
\backslash
large{{
\backslash
'E}cole Doctorale} : 
\backslash
textbf{Information, Structures, Systèmes} 
\backslash
vspace{1.0cm}
\end_layout

\begin_layout Plain Layout


\backslash
LARGE{
\backslash
textbf{Personnalisation de page web : application à l'amélioration de l'accessib
ilité du web}} 
\backslash
vspace{2mm}
\end_layout

\begin_layout Plain Layout


\backslash
begin{center}   par 
\backslash
textbf{Franck~PETITDEMANGE} 
\backslash
end{center}
\end_layout

\begin_layout Plain Layout


\backslash
vspace{2mm}
\end_layout

\begin_layout Plain Layout


\backslash
vspace{4cm}
\end_layout

\begin_layout Plain Layout


\backslash
textbf{Mars 2014}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
vspace{0.5cm}
\end_layout

\begin_layout Plain Layout

Sous la direction de 
\backslash
textbf{Marianne~HUCHARD, Michel~MEYNARD, Yoann~BONAVERO}
\end_layout

\begin_layout Plain Layout


\backslash
vspace{5mm}
\end_layout

\begin_layout Plain Layout

%
\backslash
begin{table}[hbt] %
\backslash
begin{center} %
\backslash
begin{tabular}{ l l l} %Messieurs & {
\backslash
em } & Rapporteurs
\backslash

\backslash
 %& {
\backslash
em } & 
\backslash

\backslash
 %& {
\backslash
em } & 
\backslash

\backslash
 %
\backslash

\backslash
 %Messieurs& {
\backslash
em } & Examinateurs 
\backslash

\backslash
 %& {
\backslash
em } & 
\backslash

\backslash
 %& {
\backslash
em } & 
\backslash

\backslash
 %
\backslash

\backslash
 %Monsieur & {
\backslash
em Evripidis BAMPIS} &  Directeur de thèse
\backslash

\backslash
 %& {
\backslash
em  X} & 
\backslash

\backslash
 %
\backslash
end{tabular} %
\backslash
end{center} %
\backslash
end{table}
\end_layout

\begin_layout Plain Layout

%
\backslash
vspace{.7cm}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
tableofcontents
\end_layout

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Section
Introduction et motivation
\end_layout

\begin_layout Standard
Le World Wide Web (www) est un réseau de ressource.
 La publication de ces ressources repose sur un langage universellement
 compréhensible et accepté par tous les ordinateurs : HTML.
 Historiquement conçut pour faciliter l'échange d'article dans la communauté
 scientifique.
 La démocratisation du web a fait radicalement évoluer le contenu d'une
 page web, sans pour autant que le langage ne suive ces évolutions.
 Ainsi les auteurs de page web ont détourné les pratiques de conception
 d'une page de manière anarchique.
 Ce manque d'homogénétité complique la compréhension du contenu publié sur
 le www par une machine.
 Ceci faisant perdre la propriété universelle du web voulu par son créateur
 Tim Berners Lee : 
\end_layout

\begin_layout Quotation
\begin_inset Quotes eld
\end_inset

La puissance du Web réside dans son universalité.
 L'accès à tous, quel que soit son handicap est un aspect essentiel
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout Standard
Ceci introduit la motivation de ce stage et les problématiques qui en découlent.
 
\end_layout

\begin_layout Standard
Le sujet du stage est : la personnalisation des pages web.
 L'objectif est de fournir des méthodes et des outils afin d'adapter une
 page suivant les souhaits d'un lecteur.
 On s'interesse à une application pour l'amélioration de l'accessibilité
 des pages web pour les personnes en situation de handicap visuel.
 
\end_layout

\begin_layout Standard
L'adaptation d'une page web implique notre première problématique : la restructu
ration d'une page web.
 On souhaite expérimenter une approche basée sur les méta-modèles.
 L'idée étant d'extraire la structure d'une page et d'en construire une
 représentation plus abstraite.
 Cela doit nous permettre de s'affranchir de la diversité de conception
 de ces dernières.
 A partir de cette représentation on veut lui appliquer des transformations,
 puis générer une nouvelle page conforme aux transformations.
 
\color red
L'acquision de ces transformations se fera au travers d'un protocole d'extractio
n des souhaits du lecteur que nous étudierons par la suite dans le stage.
 
\end_layout

\begin_layout Standard

\color red
Dans la section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Transformation-de-modèle"

\end_inset

 nous précisons l'exploitation que nous souhaitons faire des modèles.
 Puis en section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Modele-de-page"

\end_inset

 nous étudions différents modèles de page en perspective de la création
 d'un meta-modèle.
 La section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Extraction-de-structure"

\end_inset

 présente plus en détail la problématique d'extraction de la structure d'une
 page web.
 Elle présente également différentes approches traitant de la reconnaissance
 de structure.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Section
Exploitation des modèles
\begin_inset CommandInset label
LatexCommand label
name "sec:Transformation-de-modèle"

\end_inset


\end_layout

\begin_layout Standard
Dans le cadre du sujet nous nous plaçons dans un contexte de restructuration
 d'une page.
 On souhaite construire un modèle d'une page web à partir de cette dernière.
 Le modèle de cette page est construit depuis un méta-modèle.
\end_layout

\begin_layout Definition
\begin_inset Quotes eld
\end_inset

Un modele est une description d'une partie d'un systeme écrit dans un langage
 formel
\begin_inset Quotes erd
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Kleppe_et_al"

\end_inset


\end_layout

\begin_layout Definition
C'est une représentation simplifiée d'une partie d'un système, une abstraction
 du système étudié suivant un point de vue.
 Par exemple une carte routière est une abstraction d'un réseau routier,
 il existe plusieurs types de carte suivant ce que l'on veut étudier (chemin
 pédestre, chemin routier etc).
\end_layout

\begin_layout Quotation
\begin_inset Quotes eld
\end_inset

Pour un observateur A, M est un modèle de l'objet O, si M aide A à répondre
 aux questions qu'il pose sur O
\begin_inset Quotes erd
\end_inset

 (Minsky) 
\end_layout

\begin_layout Standard
La notion de modèle fait référence à un langage formel definissant les élements
 conceptuels du modèle : le méta-modèle.
 La syntaxe et la sémantique du modèle sont conformes à un méta modèle.
\end_layout

\begin_layout Definition
\begin_inset Quotes eld
\end_inset

Un méta-modèle est un modèle qui définit un langage formel pour exprimer
 un modèle
\begin_inset Quotes erd
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Kleppe_et_al"

\end_inset


\end_layout

\begin_layout Standard
Littéralement, c'est un modèle de modèle.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
L'avantage d'utiliser une telle construction est de manipuler une représentation
 indépendante de la diversité de conception des éléments pages.
 En effet les élements, ou concepts, récurrents peuvent être structurés
 ou mises en forme de manière différente d'une page web à l'autre.
 
\begin_inset CommandInset citation
LatexCommand cite
key "tichelaar2000famix"

\end_inset

 présente une méthodologie similaire.
 Les auteurs souhaitent appliquer des traitements homologues sur des systemes
 orientés objets implémentés dans différentes plateformes (C++, Java, ADA,
 etc).
 Pour cela ils ont réalisé un meta-modèle de systeme objet dans le but d'effectu
er des traitements independamment d'une representation sous-jacente.
 
\end_layout

\begin_layout Standard
Nous voulons exploiter ce modèle de deux façons différentes.
 D'une part ce modèle doit nous servir de support pour appliquer un processus
 de transformation sur une page.
 Et d'autre part le modèle doit nous servir de support à l'extraction des
 règles de transformation
\emph on
, 
\emph default
que nous ne traiterons pas dans la bibliographie mais par la suite dans
 le stage.
\end_layout

\begin_layout Definition
\begin_inset Quotes eld
\end_inset

Une transformation est la génération automatique d'un modèle cible depuis
 un modèle source selon une transformation définie
\begin_inset Quotes erd
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Kleppe_et_al"

\end_inset

 
\end_layout

\begin_layout Definition
Une transformation est donc un ensemble de règles qui décrivent comment
 un modèle du langage source peut être transformé dans un modèle du langage
 cible.
 Plus précisement, elle est la description de comment une ou plusieurs construct
ions d'un langage source peuvent être transformées dans un langage cible.
 Plusieurs approches pour la transformation de modèle existent 
\begin_inset CommandInset citation
LatexCommand cite
key "czarnecki2003classification"

\end_inset

.
 
\end_layout

\begin_layout Definition
Suivant le langage du modèle source et du modèle cible, intervient une distincti
on (fig.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ref{transfo_verticale_vs_horizontale}
\end_layout

\end_inset

).
 On parle de transformation endogène (rééchelonnement) lorsque les modèles
 sont exprimés dans le même langage.
 On parle de transformation exogène (translation) dans le cas contraire.
\end_layout

\begin_layout Definition
Il s'agit de transformation horizontale quand le modèle source et cible
 possèdent le même niveau d'abstraction.
 Lorsque ce n'est pas le cas, il s'agit de transformation verticale (fig.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ref{transfo_endogene_vs_exogene}
\end_layout

\end_inset

).
\end_layout

\begin_layout Definition
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=300px]{img/transfo_verticale_vs_horizontale.jpg}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Transformation horizontale et verticale 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
label{transfo_verticale_vs_horizontale}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Definition
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=300px]{img/endogene_vs_exogene.jpg}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Transformation endogène et exogène 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
label{transfo_endogene_vs_exogene}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Definition

\color red
On distingue plusieurs transformations pour notre approche (cf figure 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ref{transfo_endogene}
\end_layout

\end_inset

).
 Une première est une transformation horizontale et exogène (cf figure 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ref{transfo_endogene}
\end_layout

\end_inset

 transformation 1).
 Cette étape correspond à la construction d'un modèle source de page depuis
 une page web.
 Ce processus est l'objet de la section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Extraction-de-structure"

\end_inset

.
 Le modèle construit est conforme à un possible méta-modèle intermedaire
 étudié dans la section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Modele-de-page"

\end_inset

.
 Puis une transformation verticale et endogène (cf figure 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ref{transfo_endogene}
\end_layout

\end_inset

 transformation 2).
 Cette étape sera étudié plus tard dans le stage.
 Elle intègre dans ces transformations les souhaits de personnalisation
 d'une page web par d'un utilisateur.
 L'acquisition de ces transformations fera l'objet d'un protocol d'acquisition
 des souhaits.
 Et pour finir un transformation horizontale et exogène (cf figure 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ref{transfo_endogene}
\end_layout

\end_inset

 transformation 3) qui va nous permettre de construire la page web consulté
 par l'utilisateur suivant ses souhaits.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=300px]{img/transformation_endogene_1.jpg}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Processus de transformation 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
label{transfo_endogene}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Section
Modele de page web
\begin_inset CommandInset label
LatexCommand label
name "sec:Modele-de-page"

\end_inset


\end_layout

\begin_layout Subsection
Introduction
\end_layout

\begin_layout Standard
Comme expliqué dans la section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Transformation-de-modèle"

\end_inset

, le meta-modèle est le support à l'expression de transformation.
 Ainsi les concepts décrits par le méta-modèle doivent comprendre les éléments,
 ou concepts que l'on souhaite transformer dans une page.
 Par exemple, si l'on souhaite modifier la couleur du texte de la bar de
 navigation, on doit pouvoir exprimer dans la transformation le concept
 de bar de navigation et le concept de couleur.
\end_layout

\begin_layout Standard
On s'interesse à la conception d'un meta-modèle proche de la vision qu'un
 lecteur peut avoir d'une page.
 Le but étant d'exprimer des transformations conformes aux souhaits du lecteur.
 On propose d'étudier et de comparer le langage standard de publication
 de page sur le web, HTML, dans la norme 4 et 5 mais aussi une toxonomie
 pour la description d'interface graphique ARIA.
\end_layout

\begin_layout Subsection
HTML 4
\begin_inset CommandInset label
LatexCommand label
name "sub:HTML-4"

\end_inset


\end_layout

\begin_layout Standard
HTML 4 
\begin_inset CommandInset citation
LatexCommand cite
key "HTML_4"

\end_inset

 est un langage permettant la publication de contenu sur le web.
 C'est le langage standard actuel des pages web.
 Il permet de structurer le contenu et de lui associer une mise en forme.
 Le contenu peut être du texte, des images, ou plus généralement du multimédia.
 Ce contenu est organisé de manière hierarchique en le découpant en section
 et sous-section.
 
\end_layout

\begin_layout Paragraph

\color red
Contenu
\end_layout

\begin_layout Standard

\color red
Le contenu principal décrit dans les pages HTML 4 est un contenu textuel.
 Il peut également contenir du multimédia comme des images, des videos et
 applets (des programmes qui sont automatiquement chargés puis lancés sur
 la machine de l'utilisateur).
 L'inclusion de contenu mulimédia se fait par l'élément générique : <OBJECT>.
 Il possède une collection d'attribut prédéfinit qui décrit l'objet inclus
 dans la page.
 Le principale étant 
\emph on
type 
\emph default
décrivant le type de contenu des données (e.g figure 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ref{balise_object}
\end_layout

\end_inset

).
 La valeur de ces attributs n'est pas prédéfinit.
 Elle est interprété librement par la machine qui charge la page web.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[frame=single, language=html, ,linewidth=300px]
\end_layout

\begin_layout Plain Layout

<OBJECT data="canyon.png" type="image/png">
\end_layout

\begin_layout Plain Layout

	Ceci est une image
\end_layout

\begin_layout Plain Layout

</OBJECT>
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Exemple contenu multimédia
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
label{balise_object}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Structuration générique
\end_layout

\begin_layout Standard
HTML 4 propose un mécanisme générique pour la composition de contenu formant
 la structure des pages web.
 Ce mécanisme gravite autour des éléments de type <DIV> leurs identifiants
 respectives : id et classe.
\end_layout

\begin_layout Subparagraph
DIV
\end_layout

\begin_layout Standard
Signifiant division, est utilisé comme conteneur générique , il peut contenir
 n'importe quel élément.
 Il est exploité pour :
\end_layout

\begin_layout Itemize
regrouper les éléments pour leur appliquer un style (une mise en forme particuli
ère).
\end_layout

\begin_layout Itemize
signaler une section ou une sous-section.
 
\end_layout

\begin_layout Subparagraph
id et class
\end_layout

\begin_layout Standard
Chaque élément peut se voir attribuer un identifiant ou une classe d'appartenanc
e.
 
\emph on
id
\emph default
 assigne un nom à un élément.
 Ce nom est unique dans le document.
 
\emph on
class
\emph default
 au contraire, assigne un ou plusieurs noms de classe à un élément.
 Un nom de classe peut être partagé par plusieurs instances d'éléments.
 Les identifiants et les classes sont des suites de caractères quelconque
 décidées arbitrairement par l'auteur du document.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Les éléments DIV utilisés conjointement avec les attributs id et classe
 sont au cœur du mécanisme générique de structuration d'un document.
 DIV permet de diviser le contenu d'un document en section et sous-section
 (e.g figure 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ref{div_sectionnement}
\end_layout

\end_inset

) pour décrire sa structure.
 Les éléments <DIV> ayant une sémantique neutre, c'est l'auteur du contenu
 qui attribut (de manière arbitraire) un nom de 
\emph on
class
\emph default
 ou un 
\emph on
id
\emph default
.

\color red
 L' 
\emph on
id
\emph default
 ou la 
\emph on
class
\emph default
 est associé à une mise en forme définit à priori.
 La mise en forme est définit au travers d'un langage : CSS
\begin_inset CommandInset citation
LatexCommand cite
key "CSS"

\end_inset

 que l'on appele feuille de style.
 CSS permet d'appliquer un ensemble de règle de style ou un agencement dans
 l'espace de la page aux éléments.
 Par exemple, l'auteur peut déclarer une classe 
\begin_inset Quotes eld
\end_inset

aside
\begin_inset Quotes erd
\end_inset

 est définir que les éléments appartenant à la classe 
\begin_inset Quotes eld
\end_inset

aside
\begin_inset Quotes erd
\end_inset

 doivent être placé sur le côté droit de la page avec un fond blanc.
 
\end_layout

\begin_layout Standard

\color red
Ce mécanisme est illustré par la figure 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ref{div_role}
\end_layout

\end_inset

, les balises <DIV> découpent le contenu par thématique (entête, pied de
 page, etc).
 L'auteur associe à chaque <DIV> une 
\emph on
class
\emph default
 ou un 
\emph on
id
\emph default
 auquel s'applique une mise en page et une mise en forme définit par l'auteur
 dans une feuille de style CSS.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[frame=single, language=html, ,linewidth=300px]
\end_layout

\begin_layout Plain Layout

<body>
\end_layout

\begin_layout Plain Layout

	<div id="header" ></div>
\end_layout

\begin_layout Plain Layout

	<div id="navigation_bar"></div>
\end_layout

\begin_layout Plain Layout

	<div class="aside"></div>
\end_layout

\begin_layout Plain Layout

	<div class="section">
\end_layout

\begin_layout Plain Layout

		<div class="article"></div>
\end_layout

\begin_layout Plain Layout

		<div class="article"></div>
\end_layout

\begin_layout Plain Layout

	</div>
\end_layout

\begin_layout Plain Layout

	<div class="aside"></div>
\end_layout

\begin_layout Plain Layout

	<div id="footer"></div>
\end_layout

\begin_layout Plain Layout

</body>
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=300px]{img/architecture_Geekos_HTML4-294x300.jpg}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Architecture page web HTML 4
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
label{div_role}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[frame=single, language=html]
\end_layout

\begin_layout Plain Layout

<body>
\end_layout

\begin_layout Plain Layout

<div class="section" id="elephants-foret" > 
\end_layout

\begin_layout Plain Layout

	<h1>Les éléphants des forêts</h1> 
\end_layout

\begin_layout Plain Layout

	<p>Dans cette partie, nous abordons le sujet 
\end_layout

\begin_layout Plain Layout

moins connu des éléphants des forêts.</p>
\end_layout

\begin_layout Plain Layout

	<div class="sous-section" id="habitat-foret" > 
\end_layout

\begin_layout Plain Layout

	<h2>L'habitat</h2> 
\end_layout

\begin_layout Plain Layout

	<p>Les éléphants des forêts ne vivent pas 
\end_layout

\begin_layout Plain Layout

dans les arbres mais au milieu d'eux.</p>
\end_layout

\begin_layout Plain Layout

	</div> 
\end_layout

\begin_layout Plain Layout

</div>
\end_layout

\begin_layout Plain Layout

</body>
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Exemple découpage en section et sous-section 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
label{div_sectionnement}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
HTML 5
\end_layout

\begin_layout Standard
HTML 5 
\begin_inset CommandInset citation
LatexCommand cite
key "HTML_5"

\end_inset

 étend HTML 4 en apportant de nouveaus éléments lexicaux.
 Ces nouveaux élements
\emph on
 
\emph default
apportent une sémantique standard et explicite à la structure d'une page
 ainsi que le contenu.

\emph on
 
\end_layout

\begin_layout Paragraph

\color red
Contenu
\end_layout

\begin_layout Standard

\color red
HTML 5 fournit de nouveaus éléments comme <VIDEO>, <AUDIO> avec un ensemble
 d'attribut propre à chaque balise (à contrario de l'élément <OBJECT> de
 HTML 4).
 Les attributs spécifiques permettent de renseigner l'état d'un élément.
 Par exemple, la balise <AUDIO> possède un attribut spécifique 
\emph on
muted
\emph default
 indiquant si le son de l'élément audio est coupé ou non.
\end_layout

\begin_layout Paragraph
Structuration 
\end_layout

\begin_layout Standard
Les nouveaux élements de HTML 5 spécifient donc une sémantique standard
 :
\end_layout

\begin_layout Itemize
SECTION : représente une section générique dans un document, c'est à dire
 un regroupement de contenu par thématique.
\end_layout

\begin_layout Itemize
ARTICLE : représente un contenu autonome dans une page, facilite l'inclusion
 de plusieurs sous documents.
\end_layout

\begin_layout Itemize
NAV : représente une section de liens vers d'autres pages ou des fragments
 de cette page.
\end_layout

\begin_layout Itemize
ASIDE : représente une section de la page dont le contenu est indirectement
 lié à ce qui l'entoure et qui pourrait être séparé de cet environnement.
\end_layout

\begin_layout Itemize
HEADER : représente un groupe d'introduction ou une aide à la navigation.
 Il peut contenir des éléments de titre, mais aussi d'autres éléments tels
 qu'un logo, un formulaire de recherche, etc.
\end_layout

\begin_layout Itemize
FOOTER : représente le pied de page, ou de la section, ou de la racine de
 sectionnement la plus proche.
\end_layout

\begin_layout Standard
La figure 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ref{html5_role}
\end_layout

\end_inset

 montre un découpage explicite de la structure avec HTML 5 à contrario du
 découpage implicite de HTML 4 montré dans la figure 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ref{div_role}
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[frame=single, language=html, linewidth=300px]
\end_layout

\begin_layout Plain Layout

<body>
\end_layout

\begin_layout Plain Layout

	<header></header>
\end_layout

\begin_layout Plain Layout

	<nav></nav>
\end_layout

\begin_layout Plain Layout

	<section>
\end_layout

\begin_layout Plain Layout

		<article></article>
\end_layout

\begin_layout Plain Layout

		<article></article>
\end_layout

\begin_layout Plain Layout

	</section>
\end_layout

\begin_layout Plain Layout

	<aside></aside>
\end_layout

\begin_layout Plain Layout

	<footer></footer>
\end_layout

\begin_layout Plain Layout

</body>
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=300px]{img/architecture_Geekos_HTML5-293x300.jpg}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Exemple d'attribution de rôle
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
label{html5_role}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
ARIA
\end_layout

\begin_layout Standard
ARIA (Acessible Rich Internet Application) 
\begin_inset CommandInset citation
LatexCommand cite
key "ARIA"

\end_inset

 est la spécification d'une ontologie décrivant une interface graphique.
 Elle fournit des informations sur la structuration d'un document et plus
 généralement décrit les élements qui composent une interface au moyen d'un
 ensemble de rôles, d'états et de propriétés .
\end_layout

\begin_layout Paragraph
Rôle 
\end_layout

\begin_layout Standard
Les rôles permettent d'identifier la fonction de chaque élément d'une interface.
 Ils sont regroupés en trois catégories :
\end_layout

\begin_layout Itemize
Widget Roles : référence un ensemble de widget préfinis (alertdialog, button,
 slider, scrollbar, menu, etc)
\end_layout

\begin_layout Itemize
Document Structure Roles : décrit les structures qui organisent un document
 (article, definition, entête, ect)
\end_layout

\begin_layout Itemize
Landmark Roles : décrit les régions principales d'une interface graphique
 (main, navigation, search, etc)
\end_layout

\begin_layout Paragraph
Etats et propriétés
\end_layout

\begin_layout Standard
ARIA prend en compte l'aspect dynamique et interactif des éléments d'une
 interface.
 Elle permet d'associer des états et des propriétés aux éléments d'une interface.
 Un état est une configuration unique d'un objet.
 Par exemple, on peut définir l'état d'un bouton par l'état 
\emph on
aria-checked 
\emph default
qui peut prendre trois propriétés suivant l'interaction avec l'utilisateur
 : 
\emph on
true - false - mixed
\emph default
 .
 Dans le cas d'une checkbox, 
\emph on
true
\emph default
 indique si la checkbox est coché, 
\emph on
false
\emph default
 si elle ne l'ai pas et 
\emph on
mixed
\emph default
 dans le cas d'un ensemble de checkbox indique que certaine sont cochés.
\end_layout

\begin_layout Standard
Aria prévoit même un systeme d'annotation pour les objets ayant des comportement
s asynchrones.
 Par exemple, on peut annoter qu'un élément se met à jour de manière autonome.
\end_layout

\begin_layout Subsection
Discussion
\end_layout

\begin_layout Standard
L'étude ci-dessus présente de manière sommaire les concepts de langage de
 HTML 4, 5 et ARIA.
 Au regard de notre problématique, nous pouvons voir quelques perspectives
 à la conception d'un méta-modèle.
\end_layout

\begin_layout Standard
HTML 4 fournit une sémantique riche pour décrire les élements textuels d'une
 page et ses hyperliens.
 Cependant le mécanisme de structuration fournit est trop générique et ambiguie.
 
\color red
En effet, il n'est pas possible de délimiter explicitement les éléments
 d'une page par thématique.
 Le mécanisme d'imbrication hierarchise le contenu alors qu' un élément
 n'est pas forcement sous-section de l'élément qui l'imbrique.
 Un page web contient des éléments qui ne sont pas en rapport avec le contenu
 d'un document, mais plûtot avec le site web (e.g menu de navigation, un
 logo, etc).
\end_layout

\begin_layout Standard
HTML 5 semble combler ces limites en apportant de nouveaux éléments lexicaux
 amenant une sémantique plus riche et surtout standard sur la structure
 d'une page et la nature du contenu.
 
\color red
Elle permet donc de modéliser les limites de chaque partie d'une page suivant
 ça thématique (<SECTION>).
 Elle permet de décrire un contenu non-linéaire (<ASIDE>).
 Et introduit également des balises pour la description d'élément propre
 à une page web comme des menus de navigation, bannière, logo, etc.
\end_layout

\begin_layout Standard
La norme ARIA intégre plus d'élements pour décrire une page web et notament
 une description du comportement des éléments d'une page web particulierement
 utiles avec le développement des éléments graphiques appelés widget.
\end_layout

\begin_layout Standard
Un méta-modèle basé sur la syntaxe de HTML 5 semble être un compromis intéressan
t entre HTML 4 et ARIA.
 HTML 4 est peu adapté à l'expression de transformation reflétant l'intention
 d'un lecteur et ARIA est trop riche au regard de nos besoins immédiats.
 
\color red
Les spécifications de HTML 4 sont disponible sous forme de DTD
\begin_inset Foot
status open

\begin_layout Plain Layout

\color red
Document Type Definition
\end_layout

\end_inset

.
 Une DTD est document décrivant la grammaire d'un langage.
 Il est simple d'en construire un méta-modèle.
 HTML 5 n'est pas encore au rang de standard, aucune DTD n'est encore disponible
, seul une définition exaustive des éléments lexicaux et leurs fonctions
 sont fournit par la W3C.
 Il n'y pas de grammaire clairement spécifié.
 La tâche de réalisation d'un méta-modèle semble complexe pour HTML 5.
 Aria fournit lui un modèle UML
\begin_inset Foot
status open

\begin_layout Plain Layout

\color red
Unified Modeling Language
\end_layout

\end_inset

.
 UML est un langage de modélisation est un langage de modélisation graphique
 à base de pictogrammes
\begin_inset Foot
status open

\begin_layout Plain Layout

\color red
wikipédia
\end_layout

\end_inset

.
 Ce modèle UML est pour nous un méta-modèle directement exploitable.
 Ainsi nous pourront utiliser le modèle fournit par ARIA pour la construction
 d'un méta-modèle.
 Ce dernier serait restreint aux éléments de description d'un document (
\emph on
Document Structure Roles
\emph default
) et (
\emph on
Landmark Roles
\emph default
).
 Suivant l'évolution de nos besoins de transformation nous pourrions facilement
 intégrer d'autres aspects, notamment les widget et comportements asynchrones
 des éléments d'une page.
 Ce méta-modéle intégrera les éléments de HTML 4, en particulié ceux décrivant
 le contenu textuel non modélisé avec ARIA (e.g paragraphe).
\end_layout

\begin_layout Section
Extraction de structure
\begin_inset CommandInset label
LatexCommand label
name "sec:Extraction-de-structure"

\end_inset


\end_layout

\begin_layout Subsection
Introduction
\end_layout

\begin_layout Standard
L'extraction intègre le processus de transformation 1 de la figure
\color red
 
\color inherit

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ref{transfo_endogene}
\end_layout

\end_inset


\color red
 
\color inherit
.
 On veut extraire les éléments de la structure d'un page qui correspondent
 aux différentes briques conformes aux éléments d'un méta-modèle de page
 définit à priori.
 La problématique est dûe au langage de conception des pages web qui manque
 de sémantique, rendant un processus d'extraction automatique difficile.
\end_layout

\begin_layout Standard
En effet, La conception des pages web s'articule autour : d'un langage pour
 décrire la structure du document (HTML) et d'un langage pour décrire la
 mise en forme du document (CSS).
 Les pages sont constituées d’éléments hétérogènes : une page est constituée
 d'un ou plusieurs contenu principal, d'un menu de navigation, de publicité,
 etc...
 Chacun de ces éléments représentent une sous-structure de la page.
 Lorsqu'on regarde une page web depuis un navigateur, on constate que ces
 éléments sont structurés de façon sémantique, ils sont organisés selon
 leur sens.
 La difficulté dans la tâche d'extraction de la structure d'une page est
 dûe au manque d'expressivité du HTML.
 La norme actuelle de HTML (HTML 4), ne fournit pas de moyen de délimiter
 les éléments du document en fonction de leur sémantique.
 Par exemple, on ne peut pas délimiter de manière explicite la structure
 d'un menu dans une page avec ce langage.
 Le constat est que l'information de la structure d'une page apparaît principale
ment dans la mise en page.
 La structure d'une page est explicitée à travers l'utilisation de police,
 de couleur ou plus généralement d’éléments visuels pour caractériser les
 contenus qui ont la même signification.
\end_layout

\begin_layout Standard

\color red
Une approches étudiées dans la tâche d'extraction de la structure est un
 processus de segmentation.
 Ce dernier permet de découper une page en région, on peut ainsi délimiter
 le contenu d'une page de façon explicite.
 Nous avons étudié également des approches de reconnaissance de structure
 syntaxique et fonctionnelle.
 
\end_layout

\begin_layout Subsection
Segmentation de contenu
\end_layout

\begin_layout Standard

\color red
Comme présenté dans la section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:HTML-4"

\end_inset

 HTML 4 fournit une sémantique ambiguië avec la balise <DIV>.
 On ne sait pas si elle délimite une section, sous-section ou si elle est
 utilisé pour appliquer un style.
 Le sens n'en est connu que par le concepteur de la page.
 La compréhension de la struture d'une page est alors implicite.
 Les auteurs de l'article 
\begin_inset Quotes eld
\end_inset

Extracting content structure for web pages based on visual representation
\begin_inset Quotes erd
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "cai2003extracting"

\end_inset

 propose une approche pour rendre explicite la structure de la page.
\end_layout

\begin_layout Subsubsection
Approche segmentation visuelle
\begin_inset CommandInset label
LatexCommand label
name "sub:Approche-segmentation-visuelle"

\end_inset


\end_layout

\begin_layout Standard
L'approche proposée par les auteurs 
\begin_inset CommandInset citation
LatexCommand cite
key "cai2003extracting"

\end_inset

 présente un algorithme de partitionnement basé sur les éléments de mise
 en forme des pages web.
 Le partionnement extrait une structure qui regroupe les éléments d'une
 page sémantiquement proche en bloc (e.g figure 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ref{vips_partitionnement}
\end_layout

\end_inset

).
 Le postulat est que les éléments d'une page possédant des caractéristiques
 de mise en forme proche, tels que la police, la couleur, la taille, sont
 sémantiquement proches.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=300px]{img/VIPS-partionnement.jpg}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Exemple de partionnement, (a) page (b) DOM de la page
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
label{vips_partitionnement}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
L'algorithme exploite le DOM
\begin_inset Foot
status open

\begin_layout Plain Layout
Document Object Model
\end_layout

\end_inset

 de la page web.
 Le DOM est une API
\begin_inset Foot
status open

\begin_layout Plain Layout
Application Programming Interface
\end_layout

\end_inset

 pour les documents HTML (ou plus généralement XML) .
 Il fournit une représentation arborescente d'un document et les moyens
 d'accéder à son contenu et sa mise en forme.
 
\end_layout

\begin_layout Standard
Le processus de segmentation, figure 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ref{vips-process}
\end_layout

\end_inset

, se décompose en trois phases : un processus d'extraction de blocs, un
 processus de détection de séparateur et un processus de reconstruction.
 
\end_layout

\begin_layout Standard
Le processus d'extaction détecte les éléments du niveau courant du DOM succeptib
les de former un contenu cohérent.
 Cette détection repose sur des séparateurs explicites : on sait que certains
 éléments délimitent le contour d'un contenu (par exemple les balises <DIV>).
 Mais également sur une fonction de distance visuelle comparant les noeuds
 parents et frères du noeud courant : une balise <DIV> a de grande chance
 de délimiter un contenu sémantiquement différent du noeud parent si la
 couleur de fond est différente de celle de ce dernier.
 Pour chaque noeud, l'algorithme vérifie s'il forme un bloc ou non.
 Si oui, il associe un degré de cohérence au bloc.
 Ce degré de cohérence est un indicateur de l'importance sémantique du bloc.
 Si non, il est appliqué le même processus aux enfants du noeud.
 Quand tous les noeuds du bloc courant sont extraits, ils sont mis dans
 un pool.
 
\end_layout

\begin_layout Standard
Des séparateurs entre les blocs sont ensuite detectés.
 L'algorithme dététecte ici des séparateurs implicites, c'est à dire n'apparaîsa
nt pas dans la structure HTML.
 Les séparateurs implicites sont les espaces entre les blocs d'un pool.
 Un poid est attribué à chaque séparateur suivant son importance (par exemple,
 plus l'espacement entre deux blocs est grand, plus le poid sera élevé).
 Ce poid est un indicateur de différence sémantique entre les blocs adjacents.
 Plus le poid du séparateur est élevé entre deux blocs, plus leur contenu
 sera sémantiquement éloigné.
\end_layout

\begin_layout Standard
Une construction hiérachique des blocs est crée.
 Cette construction hiérachique repose sur le degré de cohérence attribué
 à chaque bloc.
 
\end_layout

\begin_layout Standard
Pour chaque nouveau bloc de la structure hiérarchique construite, l'algorithme
 teste le degré de cohérence attribué par rapport à un seuil de cohérence
 défini.
 Ce seuil est défini suivant la granularité de la structure que l'on veut
 en sortie de l'algorithme.
 Si le degré de cohérence n'est pas supérieur au seuil de cohérence, le
 bloc est de nouveau partionné.
 La structure finale est construite après que tous les blocs soient traités.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=300px]{img/VIPS-processus.jpg}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Algorithme de segmentation 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
label{vips-process}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Compréhension de contenu
\end_layout

\begin_layout Standard

\color red
La segmentation du contenu n'est pas suffisante dans le processus de transformat
ion.
 Pour construire notre modèle de page, nous avons besoin de faire correspondre
 les éléments d'une page web aux éléments du méta-modèle intermédaire.
 Comme soulevé dans la section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:HTML-4"

\end_inset

 la sémantique des éléments de structuration est neutre.
 On ne connait pas le rôle des conteneurs génériques <DIV>.
 On ne peut pas faire correspondre les éléments d'une page directement avec
 les éléments de notres méta-modèle.
\end_layout

\begin_layout Standard

\color red
On propose d'étudier plusieurs approches pour reconnaître les sous-structures
 composant une page.
 Une première approche est une analyse syntaxique.
 On s'interesse aux processus exploités en bioinformatique pour isoler des
 structures dans des séquences génomiques et determiner quelles sont leurs
 fonctions.
 On s'intéresse également à une analyse fonctionnelle des structures en
 s'interessant à leurs propriétés.
\end_layout

\begin_layout Subsubsection
Analyse syntaxique
\end_layout

\begin_layout Paragraph
Similarité de séquence
\end_layout

\begin_layout Standard
L'un des postulats de base en bioinformatique est qu'une séquence génomique
 similaire donne une protéine présentant la même fonction
\begin_inset CommandInset citation
LatexCommand cite
key "Comparing_multiple_RNA_secondary"

\end_inset

.
 En d'autre terme, des séquences ayant des similitudes (syntaxiques) est
 un signe de proximité fonctionnelle.
 Appliqué à une page web, cela signifie que par exemple la structure syntaxique
 d'un menu d'une page web A est similaire à la structure syntaxique d'un
 menu d'une page web B.
 Il semble cohérent d'appliquer ce postulat à une page web.
 En effet, la publication de contenu sur le web se standardise par l'intermédiar
e des scripts 
\begin_inset CommandInset citation
LatexCommand cite
key "vieira2006fast"

\end_inset

.
 Ceux-ci générent des pages de manière automatique et standardisée (Wordpress,
 joomla, etc).
 En construisant une séquence représentative d'un élément de notre méta-modèle,
 il devrait être possible de déterminer la fonction d'un fragment de page
 web.
 Pour déterminer la similarité de deux séquences, les bioinformaticiens
 utilisent le concept d'alignement
\begin_inset CommandInset citation
LatexCommand cite
key "sobel1986multiple"

\end_inset

.
\end_layout

\begin_layout Definition
L' alignement est la mise en correspondance de deux séquences.
 Soit deux séquences X1:n et Y1:m dont la valeur est définie dans le même
 alphabet fini 
\begin_inset Formula $\Lambda$
\end_inset

.
 Un alignement est une correspondance entre les lettres de la première séquence
 et celles de la deuxieme, sans en changer l'ordre, et en autorisant eventuellem
ent des « trous ».
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
G A A T C _ T G A C
\end_layout

\begin_layout Plain Layout
C A _ _ C G T _ A _
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Alignement possible des sequences 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
X1=GAATCTGAC,Y1=CACGTA
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\backslash

\backslash

\end_layout

\end_inset

La mise en correspondance repose sur trois types d'opérations élementaires
 : la substitution, l'insertion, deletion.
 Plusieurs combinaisons d'alignements existent.
 Lorsque l'on souhaite comparer la similitude de deux séquences, la meilleure
 solution est celle qui minimise le nombre d'opérations d'insertions et
 de deletions.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=300px]{img/operation_alignement_sequence.jpg}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
opérations d'alignements
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Il existe deux types d'alignements : local et global.
 
\end_layout

\begin_layout Subparagraph
L'alignement global 
\end_layout

\begin_layout Standard
L'alignement global est conçu pour comparer des séquences sur toute leur
 longueur.
 Une méthode optimale pour trouver un alignement global maximal de chaîne
 de caractères est l'algorithme de Needleman-Wunsch 
\begin_inset CommandInset citation
LatexCommand cite
key "needleman1970general"

\end_inset

.
 
\end_layout

\begin_layout Subparagraph
L'alignement local 
\end_layout

\begin_layout Standard
L'alignement local est conçu pour rechercher dans la séquence A des régions
 semblables à la séquence B (ou à des parties de la séquence B).
 Une méthode pour trouver un alignement local maximal de chaîne de caractères
 est l'algorithme de Smith & Waterman 
\begin_inset CommandInset citation
LatexCommand cite
key "smith1981identification"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=200px]{img/Global-local-alignment.png}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Comparaison sequence d'alignement globale et locale
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
label{comp-align}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Comme on le voit dans la figure 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ref{comp-align}
\end_layout

\end_inset

 l'alignement global tente d'aligner les séquences sur toute leur longueur,
 tandis que l'alignement local se focalise sur les zones de forte homologie.
 L'alignement global est adapté à la comparaison de deux fragments de taille
 approximativement égales.
 Alors que l'alignement local, permet de faire correspondre un fragment
 dans une plus grande séquence.
\end_layout

\begin_layout Paragraph
Similarité d'arbre
\end_layout

\begin_layout Standard

\color blue
Sur le web, une page web est accessible et manipulable sous la forme d'une
 structure arborescente que l'on appel DOM (cf section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Approche-segmentation-visuelle"

\end_inset

).
 Une autre approche dans l'étude de similarité de structure est la comparaison
 d'arbre.

\color red
 
\end_layout

\begin_layout Standard
Cette approche consiste à trouver la plus petite ou la moins coûteuse séquence
 d'opération d'édition (substitution, suppression et insertion) qui permet
 la transformation d'un arbre vers un autre.
 
\end_layout

\begin_layout Standard
Notons 
\begin_inset Formula $\Lambda$
\end_inset

 un noeud vide.
 Une opération d'édition est écrite 
\begin_inset Formula $b\rightarrow c$
\end_inset

 , où b et c sont soit un noeud, soit 
\begin_inset Formula $\Lambda$
\end_inset

 .
 
\end_layout

\begin_layout Itemize
\begin_inset Formula $b\rightarrow c$
\end_inset

 est une opération de substition si 
\begin_inset Formula $b\neq\Lambda$
\end_inset

 et 
\begin_inset Formula $c\neq\Lambda$
\end_inset

, 
\end_layout

\begin_layout Itemize
une opération de suppression si 
\begin_inset Formula $b\neq\Lambda\doteq c$
\end_inset

, 
\end_layout

\begin_layout Itemize
une opération d'insertion si 
\begin_inset Formula $b=\Lambda\neq c$
\end_inset


\end_layout

\begin_layout Standard
Pour exprimer une séquence d'opération élémentaire qui transforme l'arbre,
 on utilise le concept de mapping, introduit 
\begin_inset CommandInset citation
LatexCommand cite
key "tai1979tree"

\end_inset

.
 Un mapping établie une correspondance un-à-un entre les nœuds de deux arbres
 ordonnés et qui préservent l'ordre des nœuds.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Definition*
Un Mapping 
\begin_inset Formula $M$
\end_inset

 de l'arbre T1 vers l'arbre T2 est un ensemble de paire ordonnée d'entier
 (i, j), 
\begin_inset Formula $1\leqslant i\leqslant n1$
\end_inset

, 
\begin_inset Formula $1\leq j\leq n2$
\end_inset

, satisfaisant les conditions suivantes, pour tous 
\begin_inset Formula $(i1,j1),(i2,j2)\in M$
\end_inset

:
\end_layout

\begin_layout Itemize
i1=i2 si et seulement si, j1=j2 (one-to-one condition);
\end_layout

\begin_layout Itemize
t1[i1] est à droite de t1[i2], si est seulement si, t2[j1] est à droite
 de t2[j2] (préservation de l'ordre des noeuds frères);
\end_layout

\begin_layout Itemize
t1[i1] est un ancêtre de t1[i2] si et seulement si, t2[j1] est un ancêtre
 de t2[j2] (préservation de l'ordre des ancêtres);
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Definition*
Soit M un mapping entre les arbres T1 et T2 décrivant des opérations de
 modification.
 S est l'ensemble de pair 
\begin_inset Formula $(i,j)\in M$
\end_inset

, D l'ensemble des nœuds T1[i] n'ayant pas de paire 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $(i,j)\in M$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
 , et I l'ensemble des nœuds T2[j] n'ayant pas de paire 
\begin_inset Formula $(i,j)\in M$
\end_inset

.
 Le coût du mapping est donné par 
\begin_inset Formula $|S|p+|I|q+|D|r$
\end_inset

| , où p est le coût des substitutions non identiques, q est le coût des
 insertions (1), r est le coût d'une suppression (1), le coût des substitutions
 identiques est 0.
 
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Definition*

\color blue
Plusieurs classes de mapping existent, la différence ce situe sur les restrictio
ns des opérations autorisées dans le mapping.
 Les quatres principales sont : distance d'alignement, distance de sous
 arbre-isolé, distance ascendante, distance descendante 
\begin_inset CommandInset citation
LatexCommand cite
key "wang2001finding"

\end_inset

.
 
\begin_inset CommandInset citation
LatexCommand cite
key "vieira2006fast"

\end_inset

 utilise un mapping de distance descendante pour isoler des sous-structures
 communes entre plusieurs pages afin d'en identifier des patterns (motif
 répresentatif d'une structure).
 Cette approche semble intéressante pour partionner une page d'après suivant
 méta-modèle intermédaire.
\end_layout

\begin_layout Standard

\emph on
Pour connaître la similarité entre deux structures, on veut calculer une
 distance d'alignement.
 C'est à dire trouver le coût minimum du mapping pour que T1 et T2 soient
 isomorphes.
 KUO-CHUNG TAI 
\begin_inset CommandInset citation
LatexCommand cite
key "tai1979tree"

\end_inset

 propose un algorithme de programmation dynamique pour résoudre la question
 de distance d'arbre en temps séquentiel 
\begin_inset Formula $O(|T1|\times|T2|\times min(depth(T1),leaves(T1))\times min(depth(T2),leaves(T2)))$
\end_inset

 .
\end_layout

\begin_layout Subsubsection
Analyse fonctionnelle
\begin_inset CommandInset label
LatexCommand label
name "sub:Analyse-fonctionnelle"

\end_inset


\end_layout

\begin_layout Standard
L'article 
\begin_inset Quotes eld
\end_inset

Function-based object model towards website adaptation
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "chen2001function"

\end_inset

 propose une analyse des fonctions d'un élément d'une page.

\color red
 Cette approche repose sur une segmentation du contenu d'une page à priori
 pour identifier chaque élément.
 Cette segmentation est similaire celle de la section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Approche-segmentation-visuelle"

\end_inset

.
 Les éléments isolés par cette segmentation sont vu comme des objets possédant
 des proprités (type d'agencement, nombre d'hyperlien, etc).
 Les auteurs proposent un modèle : Function-based object.
 Ce modèle est une classification de chaque élément d'une page.
 Cette classification ce fait sur la valeur des propriétés de chaque objet
\color inherit
.
 Les principales propriétés spécifiés sont basées sur la présentation (type
 de média, agencement, etc), les hyperliens (le nombre d'hyperlien? vers
 où pointent ils?), l'interaction avec l'utilisateur (uniquement affichage,
 soumission de contenu?).
 L'extraction des propriétés fonctionnelles sont faites principalement par
 analyse de la nature des balises et les attributs associés aux balises.
 Suivant la valeur des propriétes, les objets sont rangés dans différentes
 catégories : objet de type informatif, de navigation, d'intéraction, de
 décoration, etc.
 L'analyse de la catégorie d'un objet se fait au moyen d'un arbre de décision
 (e.g figure 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ref{arbre_decision}
\end_layout

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=200px]{img/arbre_decision.jpg}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Exemple d'arbre de décision basique
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
label{arbre_decision}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Discussion
\end_layout

\begin_layout Standard
L'alignement de séquence locale peut sembler une bonne approche.
 On peut comparer directement une séquence du méta-modèle à la page pour
 trouver la zone qui correspond.
 Du point de vue de la compléxité, pour deux séquences de taille m et n
 la compléxité de l'algorithme de Smith & Waterman est 
\begin_inset Formula $\mathcal{O}(nm)$
\end_inset

.
 A l'échelle d'une page web cela paraît raisonnable.
 Aucune solution basé sur ce genre d'approche appliquée aux données du web
 n'a été trouvé.
 On peux cependant prendre en compte qu' une page web est fournit par les
 navigateurs web sous la forme d'une structure arborescente.
 Cette solution implique donc un prè-traitement (applatissement d'arbre).
 Cette solution paraît efficace pour trouver un élément de notre méta-modèle,
 mais trop complexe si l'on souhaite aligner tous les éléments de notre
 méta-modèle dans une page.
\end_layout

\begin_layout Standard
La similarité d'arbre paraît plus naturelle comme approche.
 D'un point de vue compléxité, soit 
\emph on
T1
\emph default
 arbre de la page et 
\emph on
T2
\emph default
 l'arbre du métamodèle, et 
\emph on
d
\emph default
 un entier une distance définit, un mapping basé sur un distance descendante
 à un coup théorique de 
\begin_inset Formula $\mathcal{O}(d^{\text{²}}+|T1|+|T2|)$
\end_inset

.
 La tailles des données en entrée rendent cette solution acceptable.
 
\end_layout

\begin_layout Standard
Les deux approches présentent un inconvénient majeur, elles sont trop dépendante
s de la répresentation sous-jacente des données.

\emph on
 
\emph default
Les données publiées par HTML sont des formats de données semi-structurées
 
\begin_inset CommandInset citation
LatexCommand cite
key "wisniewski2007modele"

\end_inset

.
 Il n'y a pas syntaxe formelle pour décrire un type de donnée.
 Un menu peut être écrit avec différentes syntaxes (e.g figure 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ref{menu_html4}
\end_layout

\end_inset

).
 Cela compléxifie une solution basée sur une analyse syntaxique.
 Une solution mise en oeuvre par 
\begin_inset CommandInset citation
LatexCommand cite
key "chang2001iepad"

\end_inset

 est une translation des éléments d'une page vers une réprésentation plus
 abstraite.
 Suivant leur classe d'appartenance les balises sont remplacées par un type
 plus générique (e.g figure 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ref{translation_balise}
\end_layout

\end_inset

), par exemple les éléments <UL>, <OL>, <DL> sont différents type de liste,
 ils seraient remplacés par un type plus générique <LISTS>.
 Les solutions basé sur une analyse syntaxique recquiert la conception d'un
 pattern.
 La conception de ce genre de pattern et une opéation couteûse
\begin_inset CommandInset citation
LatexCommand cite
key "vieira2006fast,chang2001iepad"

\end_inset

.
\end_layout

\begin_layout Standard
L'approche par analyse fonctionnelle (section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Analyse-fonctionnelle"

\end_inset

) semble limiter les incovénients de l'analyse syntaxique.
 D'après les résultats de l'expérimentation faite dans l'article, l'approche
 fonctionne bien.
 Les éléments de la page sont bien identifiés conformement au modèle définit.
 Cependant le modèle est rustique et ne couvre pas tous nos besoins.
 Les auteurs de l'approche décrivent leur méthodologie pour la conception
 des différents objets du modèle.
 Nous devrions pouvoir l'étendre facilement à nos besoins
\color blue
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[frame=single, language=html, linewidth=350px]
\end_layout

\begin_layout Plain Layout

<div class='menu'>     
\end_layout

\begin_layout Plain Layout

	<ul>    
\end_layout

\begin_layout Plain Layout

	<li><a href='#'>Home</a></li>     
\end_layout

\begin_layout Plain Layout

	<li><a href='#'>About</a></li>     
\end_layout

\begin_layout Plain Layout

	<li><a href='#'>Services</a></li>     
\end_layout

\begin_layout Plain Layout

	<li><a href='#'>Contact</a></li>
\end_layout

\begin_layout Plain Layout

</ul>
\end_layout

\begin_layout Plain Layout

</div>
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[frame=single, language=html, linewidth=350px]
\end_layout

\begin_layout Plain Layout

<div class='menu'>
\end_layout

\begin_layout Plain Layout

<ul>    
\end_layout

\begin_layout Plain Layout

	<li><a href='#'>Home</a></li>     
\end_layout

\begin_layout Plain Layout

	<li><a href='#'>About</a></li>     
\end_layout

\begin_layout Plain Layout

	<li><a href='#'>Services</a></li>     
\end_layout

\begin_layout Plain Layout

	<li><a href='#'>Contact</a></li>
\end_layout

\begin_layout Plain Layout

</ul>
\end_layout

\begin_layout Plain Layout

</div>
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[frame=single, language=html, linewidth=350px]
\end_layout

\begin_layout Plain Layout

<div class='menu'>       
\end_layout

\begin_layout Plain Layout

	<a href='#'>Home</a>     
\end_layout

\begin_layout Plain Layout

	<a href='#'>About</a>     
\end_layout

\begin_layout Plain Layout

	<a href='#'>Services</a>     
\end_layout

\begin_layout Plain Layout

	<a href='#'>Contact</a>
\end_layout

\begin_layout Plain Layout

</div>
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Exemple de conception de menu
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
label{menu_html4}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=300px]{img/translation_balise.jpg}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Classification balise
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
label{translation_balise}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Section
Conclusion et futurs travaux
\end_layout

\begin_layout Standard

\color blue
Cette étude bibliographique nous permis de cerner les avantages d'un processus
 dirigé par les modèles.
 
\end_layout

\begin_layout Standard

\color blue
Au travers de l'étude d'un possible support à la réalisation d'un méta-modèle,
 nous avons synthétisé les principaux concepts des langages de publication
 sur le web.
 Cette partie était necessaire à la compréhenion des langages de publication
 de contenu sur le web et leur futur évolution.
 Ce travail à également été l'amorce pour cerner la difficulté du traitement
 compréhension automatique du contenu dans cet environnement.
 Nous en avons isolé les principales difficutés.
 Ceci nous à permis d'étudier des solutions existantes et explorer d'autres
 pistes possibles à l'extraction de structure d'intêret.
 
\end_layout

\begin_layout Standard

\color blue
La suite des travaux vont se diriger vers la réalisation d'un méta-modèle,
 puis le processus de transformation d'une page web pour qu'elle soit conforme
 à ce méta-modèle.
 Et pour finir l'étude et la réalisation d'un protocole d'acquisition des
 souhaits de personnalisation d'une page.
 Ce protocole présente un grand intêret pour nous puisque c'est grâce à
 cette partie que nous souhaitons rendre le web plus accessible aux personnes
 en situation de handicap.
 En leur mettant à disposition un outil capable d'adapter le contenu d'une
 page web de façon personnalisé.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "bibliographie/biblio"
options "plain"

\end_inset


\end_layout

\end_body
\end_document
